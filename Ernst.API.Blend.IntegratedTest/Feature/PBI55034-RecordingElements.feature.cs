// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.1.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Ernst.API.Blend.IntegratedTest.Feature
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class PBI55034_RecordingElementsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "PBI55034-RecordingElements.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "PBI55034-RecordingElements", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "PBI55034-RecordingElements")))
            {
                global::Ernst.API.Blend.IntegratedTest.Feature.PBI55034_RecordingElementsFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Status OK")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PBI55034-RecordingElements")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("200-Status-OK")]
        public virtual void StatusOK()
        {
            string[] tagsOfScenario = new string[] {
                    "200-Status-OK"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Status OK", null, new string[] {
                        "200-Status-OK"});
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
 testRunner.Given("User has Request File\'RequestFiles\\RecordingFees.xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 6
 testRunner.And("User has Endpoint \'quote/response\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 7
 testRunner.When("User Posted the file with contentType as \'application/xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 8
 testRunner.Then("Status code should be \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Invalid Endpoint")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PBI55034-RecordingElements")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("404-Notfound")]
        public virtual void InvalidEndpoint()
        {
            string[] tagsOfScenario = new string[] {
                    "404-Notfound"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Invalid Endpoint", null, new string[] {
                        "404-Notfound"});
#line 10
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 11
 testRunner.Given("User has Request File\'RequestFiles\\RecordingFees.xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 12
 testRunner.And("User has Endpoint \'quote/resnse\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 13
 testRunner.When("User Posted the file with contentType as \'application/xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 14
 testRunner.Then("Status code should be \'NotFound\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Invalid Bearer Toekn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PBI55034-RecordingElements")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("401-NotAuthorized")]
        public virtual void InvalidBearerToekn()
        {
            string[] tagsOfScenario = new string[] {
                    "401-NotAuthorized"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Invalid Bearer Toekn", null, new string[] {
                        "401-NotAuthorized"});
#line 16
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 17
 testRunner.Given("User has Request File\'RequestFiles\\RecordingFees.xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 18
 testRunner.And("User has Endpoint \'quote/response\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 19
 testRunner.When("User Posted the file without authorization and contentType as \'application/xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 20
 testRunner.Then("Status code should be \'Unauthorized\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Invalid Content")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PBI55034-RecordingElements")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("400-BadRequest")]
        public virtual void InvalidContent()
        {
            string[] tagsOfScenario = new string[] {
                    "400-BadRequest"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Invalid Content", null, new string[] {
                        "400-BadRequest"});
#line 22
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 23
 testRunner.Given("User has Request File\'RequestFiles\\InvalidErnstFeeServiceResponse-Errors.xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 24
 testRunner.And("User has Endpoint \'quote/response\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 25
 testRunner.When("User Posted the file with contentType as \'application/xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 26
 testRunner.Then("Status code should be \'BadRequest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("With LineDescription as Deed")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PBI55034-RecordingElements")]
        public virtual void WithLineDescriptionAsDeed()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("With LineDescription as Deed", null, ((string[])(null)));
#line 28
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 29
testRunner.Given("User has Request File\'RequestFiles\\RecordingFees.xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 30
testRunner.And("User has Endpoint \'quote/response\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                            "Xpath",
                            "ValuetoModify"});
                table20.AddRow(new string[] {
                            "/Response/ErnstResponse/Display/Calculation/HUDRESPA2010/HUDLine1202/Deed2010/Lin" +
                                "eDescription",
                            "deed $"});
                table20.AddRow(new string[] {
                            "/Response/ErnstResponse/Display/Calculation/HUDRESPA2010/HUDLine1202/Deed2010/Amo" +
                                "unt",
                            "405.00"});
#line 31
testRunner.When("User has modified below  information in the  input file", ((string)(null)), table20, "When ");
#line hidden
#line 35
testRunner.When("User Posted the file with contentType as \'application/xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 36
testRunner.Then("Status code should be \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "Expectedvalue"});
                table21.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'RecordingDeed\']/ref" +
                                "erenceId",
                            "RecordingDeed"});
                table21.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'RecordingDeed\']/nam" +
                                "e",
                            "deed $"});
                table21.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'RecordingDeed\']/loa" +
                                "nEstimateSection",
                            "E"});
                table21.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'RecordingDeed\']/hud" +
                                "LineNumber",
                            "1202"});
                table21.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'RecordingDeed\']/inc" +
                                "ludedInApr",
                            "false"});
                table21.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'RecordingDeed\']/amo" +
                                "unt",
                            "405.00"});
                table21.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'RecordingDeed\']/pai" +
                                "dBy",
                            "Borrower"});
#line 37
testRunner.And("Verify Xml Response Values", ((string)(null)), table21, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("With LineDescription as Morgage")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PBI55034-RecordingElements")]
        public virtual void WithLineDescriptionAsMorgage()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("With LineDescription as Morgage", null, ((string[])(null)));
#line 46
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 47
testRunner.Given("User has Request File\'RequestFiles\\RecordingFees.xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 48
testRunner.And("User has Endpoint \'quote/response\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                            "Xpath",
                            "ValuetoModify"});
                table22.AddRow(new string[] {
                            "/Response/ErnstResponse/Display/Calculation/HUDRESPA2010/HUDLine1202/Mortgage2010" +
                                "/LineDescription",
                            "Mortgage $"});
                table22.AddRow(new string[] {
                            "/Response/ErnstResponse/Display/Calculation/HUDRESPA2010/HUDLine1202/Mortgage2010" +
                                "/Amount",
                            "695.00"});
#line 49
testRunner.When("User has modified below  information in the  input file", ((string)(null)), table22, "When ");
#line hidden
#line 53
testRunner.When("User Posted the file with contentType as \'application/xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 54
testRunner.Then("Status code should be \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "Expectedvalue"});
                table23.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'RecordingMortgage\']" +
                                "/referenceId",
                            "RecordingMortgage"});
                table23.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'RecordingMortgage\']" +
                                "/name",
                            "Mortgage $"});
                table23.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'RecordingMortgage\']" +
                                "/loanEstimateSection",
                            "E"});
                table23.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'RecordingMortgage\']" +
                                "/hudLineNumber",
                            "1202"});
                table23.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'RecordingMortgage\']" +
                                "/includedInApr",
                            "false"});
                table23.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'RecordingMortgage\']" +
                                "/amount",
                            "695.00"});
                table23.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'RecordingMortgage\']" +
                                "/paidBy",
                            "Borrower"});
#line 55
testRunner.And("Verify Xml Response Values", ((string)(null)), table23, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("With LineDescription as Release")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PBI55034-RecordingElements")]
        public virtual void WithLineDescriptionAsRelease()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("With LineDescription as Release", null, ((string[])(null)));
#line 65
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 66
testRunner.Given("User has Request File\'RequestFiles\\RecordingFees.xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 67
testRunner.And("User has Endpoint \'quote/response\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                            "Xpath",
                            "ValuetoModify"});
                table24.AddRow(new string[] {
                            "/Response/ErnstResponse/Display/Calculation/HUDRESPA2010/HUDLine1202/Release2010/" +
                                "LineDescription",
                            "Release $"});
                table24.AddRow(new string[] {
                            "/Response/ErnstResponse/Display/Calculation/HUDRESPA2010/HUDLine1202/Release2010/" +
                                "Amount",
                            "550.50"});
#line 68
testRunner.When("User has modified below  information in the  input file", ((string)(null)), table24, "When ");
#line hidden
#line 74
testRunner.When("User Posted the file with contentType as \'application/xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 75
testRunner.Then("Status code should be \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "Expectedvalue"});
                table25.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'RecordingRelease\']/" +
                                "referenceId",
                            "RecordingRelease"});
                table25.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'RecordingRelease\']/" +
                                "name",
                            "Release $"});
                table25.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'RecordingRelease\']/" +
                                "loanEstimateSection",
                            "E"});
                table25.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'RecordingRelease\']/" +
                                "hudLineNumber",
                            "1202"});
                table25.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'RecordingRelease\']/" +
                                "includedInApr",
                            "false"});
                table25.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'RecordingRelease\']/" +
                                "amount",
                            "550.50"});
                table25.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'RecordingRelease\']/" +
                                "paidBy",
                            "Borrower"});
#line 76
testRunner.And("Verify Xml Response Values", ((string)(null)), table25, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("With LineDescription as Assignment")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PBI55034-RecordingElements")]
        public virtual void WithLineDescriptionAsAssignment()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("With LineDescription as Assignment", null, ((string[])(null)));
#line 86
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 87
testRunner.Given("User has Request File\'RequestFiles\\RecordingFees.xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 88
testRunner.And("User has Endpoint \'quote/response\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                            "Xpath",
                            "ValuetoModify"});
                table26.AddRow(new string[] {
                            "/Response/ErnstResponse/Display/Calculation/HUDRESPA2010/HUDLine1202/Assignment20" +
                                "10/LineDescription",
                            "Assignment $"});
                table26.AddRow(new string[] {
                            "/Response/ErnstResponse/Display/Calculation/HUDRESPA2010/HUDLine1202/Assignment20" +
                                "10/Amount",
                            "560.50"});
#line 89
testRunner.When("User has modified below  information in the  input file", ((string)(null)), table26, "When ");
#line hidden
#line 94
testRunner.When("User Posted the file with contentType as \'application/xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 95
testRunner.Then("Status code should be \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "Expectedvalue"});
                table27.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'RecordingAssignment" +
                                "\']/referenceId",
                            "RecordingAssignment"});
                table27.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'RecordingAssignment" +
                                "\']/name",
                            "Assignment $"});
                table27.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'RecordingAssignment" +
                                "\']/loanEstimateSection",
                            "E"});
                table27.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'RecordingAssignment" +
                                "\']/hudLineNumber",
                            "1202"});
                table27.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'RecordingAssignment" +
                                "\']/includedInApr",
                            "false"});
                table27.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'RecordingAssignment" +
                                "\']/amount",
                            "560.50"});
                table27.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'RecordingAssignment" +
                                "\']/paidBy",
                            "Borrower"});
#line 96
testRunner.And("Verify Xml Response Values", ((string)(null)), table27, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("With LineDescription as POA")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PBI55034-RecordingElements")]
        public virtual void WithLineDescriptionAsPOA()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("With LineDescription as POA", null, ((string[])(null)));
#line 106
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 107
testRunner.Given("User has Request File\'RequestFiles\\RecordingFees.xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 108
testRunner.And("User has Endpoint \'quote/response\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                            "Xpath",
                            "ValuetoModify"});
                table28.AddRow(new string[] {
                            "/Response/ErnstResponse/Display/Calculation/HUDRESPA2010/HUDLine1202/POA2010/Line" +
                                "Description",
                            "POA $"});
                table28.AddRow(new string[] {
                            "/Response/ErnstResponse/Display/Calculation/HUDRESPA2010/HUDLine1202/POA2010/Amou" +
                                "nt",
                            "250.00"});
#line 109
testRunner.When("User has modified below  information in the  input file", ((string)(null)), table28, "When ");
#line hidden
#line 114
testRunner.When("User Posted the file with contentType as \'application/xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 115
testRunner.Then("Status code should be \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "Expectedvalue"});
                table29.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'RecordingPOA\']/refe" +
                                "renceId",
                            "RecordingPOA"});
                table29.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'RecordingPOA\']/name" +
                                "",
                            "POA $"});
                table29.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'RecordingPOA\']/loan" +
                                "EstimateSection",
                            "E"});
                table29.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'RecordingPOA\']/hudL" +
                                "ineNumber",
                            "1202"});
                table29.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'RecordingPOA\']/incl" +
                                "udedInApr",
                            "false"});
                table29.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'RecordingPOA\']/amou" +
                                "nt",
                            "250.00"});
                table29.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'RecordingPOA\']/paid" +
                                "By",
                            "Borrower"});
#line 116
testRunner.And("Verify Xml Response Values", ((string)(null)), table29, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("With LineDescription as Subordination")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PBI55034-RecordingElements")]
        public virtual void WithLineDescriptionAsSubordination()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("With LineDescription as Subordination", null, ((string[])(null)));
#line 126
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 127
testRunner.Given("User has Request File\'RequestFiles\\RecordingFees.xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 128
testRunner.And("User has Endpoint \'quote/response\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                            "Xpath",
                            "ValuetoModify"});
                table30.AddRow(new string[] {
                            "/Response/ErnstResponse/Display/Calculation/HUDRESPA2010/HUDLine1202/Subordinatio" +
                                "n2010/LineDescription",
                            "Subordination $"});
                table30.AddRow(new string[] {
                            "/Response/ErnstResponse/Display/Calculation/HUDRESPA2010/HUDLine1202/Subordinatio" +
                                "n2010/Amount",
                            "570.00"});
#line 129
testRunner.When("User has modified below  information in the  input file", ((string)(null)), table30, "When ");
#line hidden
#line 134
testRunner.When("User Posted the file with contentType as \'application/xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 135
testRunner.Then("Status code should be \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "Expectedvalue"});
                table31.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'RecordingSubordinat" +
                                "ion\']/referenceId",
                            "RecordingSubordination"});
                table31.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'RecordingSubordinat" +
                                "ion\']/name",
                            "Subordination $"});
                table31.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'RecordingSubordinat" +
                                "ion\']/loanEstimateSection",
                            "E"});
                table31.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'RecordingSubordinat" +
                                "ion\']/hudLineNumber",
                            "1202"});
                table31.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'RecordingSubordinat" +
                                "ion\']/includedInApr",
                            "false"});
                table31.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'RecordingSubordinat" +
                                "ion\']/amount",
                            "570.00"});
                table31.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'RecordingSubordinat" +
                                "ion\']/paidBy",
                            "Borrower"});
#line 136
testRunner.And("Verify Xml Response Values", ((string)(null)), table31, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("With LineDescription as Notorial")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PBI55034-RecordingElements")]
        public virtual void WithLineDescriptionAsNotorial()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("With LineDescription as Notorial", null, ((string[])(null)));
#line 146
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 147
testRunner.Given("User has Request File\'RequestFiles\\RecordingFees.xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 148
testRunner.And("User has Endpoint \'quote/response\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                            "Xpath",
                            "ValuetoModify"});
                table32.AddRow(new string[] {
                            "/Response/ErnstResponse/Display/Calculation/HUDRESPA2010/HUDLine1202/Notorial2010" +
                                "/LineDescription",
                            "Notorial $"});
                table32.AddRow(new string[] {
                            "/Response/ErnstResponse/Display/Calculation/HUDRESPA2010/HUDLine1202/Notorial2010" +
                                "/Amount",
                            "580.00"});
#line 149
testRunner.When("User has modified below  information in the  input file", ((string)(null)), table32, "When ");
#line hidden
#line 154
testRunner.When("User Posted the file with contentType as \'application/xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 155
testRunner.Then("Status code should be \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "Expectedvalue"});
                table33.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'RecordingNotorial\']" +
                                "/referenceId",
                            "RecordingNotorial"});
                table33.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'RecordingNotorial\']" +
                                "/name",
                            "Notorial $"});
                table33.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'RecordingNotorial\']" +
                                "/loanEstimateSection",
                            "E"});
                table33.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'RecordingNotorial\']" +
                                "/hudLineNumber",
                            "1202"});
                table33.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'RecordingNotorial\']" +
                                "/includedInApr",
                            "false"});
                table33.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'RecordingNotorial\']" +
                                "/amount",
                            "580.00"});
                table33.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'RecordingNotorial\']" +
                                "/paidBy",
                            "Borrower"});
#line 156
testRunner.And("Verify Xml Response Values", ((string)(null)), table33, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("With LineDescription as  ResidentialMortgage")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PBI55034-RecordingElements")]
        public virtual void WithLineDescriptionAsResidentialMortgage()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("With LineDescription as  ResidentialMortgage", null, ((string[])(null)));
#line 166
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 167
testRunner.Given("User has Request File\'RequestFiles\\RecordingFees.xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 168
testRunner.And("User has Endpoint \'quote/response\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                            "Xpath",
                            "ValuetoModify"});
                table34.AddRow(new string[] {
                            "/Response/ErnstResponse/Display/Calculation/HUDRESPA2010/HUDLine1202/ResidentialM" +
                                "ortgage2010/LineDescription",
                            "ResidentialMortgage $"});
                table34.AddRow(new string[] {
                            "/Response/ErnstResponse/Display/Calculation/HUDRESPA2010/HUDLine1202/ResidentialM" +
                                "ortgage2010/Amount",
                            "590.00"});
#line 169
testRunner.When("User has modified below  information in the  input file", ((string)(null)), table34, "When ");
#line hidden
#line 174
testRunner.When("User Posted the file with contentType as \'application/xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 175
testRunner.Then("Status code should be \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "Expectedvalue"});
                table35.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'RecordingResidentia" +
                                "lMortgage\']/referenceId",
                            "RecordingResidentialMortgage"});
                table35.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'RecordingResidentia" +
                                "lMortgage\']/name",
                            "ResidentialMortgage $"});
                table35.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'RecordingResidentia" +
                                "lMortgage\']/loanEstimateSection",
                            "E"});
                table35.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'RecordingResidentia" +
                                "lMortgage\']/hudLineNumber",
                            "1202"});
                table35.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'RecordingResidentia" +
                                "lMortgage\']/includedInApr",
                            "false"});
                table35.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'RecordingResidentia" +
                                "lMortgage\']/amount",
                            "590.00"});
                table35.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'RecordingResidentia" +
                                "lMortgage\']/paidBy",
                            "Borrower"});
#line 176
testRunner.And("Verify Xml Response Values", ((string)(null)), table35, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("With LineDescription as  Other")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PBI55034-RecordingElements")]
        public virtual void WithLineDescriptionAsOther()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("With LineDescription as  Other", null, ((string[])(null)));
#line 186
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 187
testRunner.Given("User has Request File\'RequestFiles\\RecordingFees.xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 188
testRunner.And("User has Endpoint \'quote/response\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                            "Xpath",
                            "ValuetoModify"});
                table36.AddRow(new string[] {
                            "/Response/ErnstResponse/Display/Calculation/HUDRESPA2010/HUDLine1202/Other2010/Li" +
                                "neDescription",
                            "Other $"});
                table36.AddRow(new string[] {
                            "/Response/ErnstResponse/Display/Calculation/HUDRESPA2010/HUDLine1202/Other2010/Am" +
                                "ount",
                            "600.00"});
#line 189
testRunner.When("User has modified below  information in the  input file", ((string)(null)), table36, "When ");
#line hidden
#line 195
testRunner.When("User Posted the file with contentType as \'application/xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 196
testRunner.Then("Status code should be \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "Expectedvalue"});
                table37.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'RecordingOther\']/re" +
                                "ferenceId",
                            "RecordingOther"});
                table37.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'RecordingOther\']/na" +
                                "me",
                            "Other $"});
                table37.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'RecordingOther\']/lo" +
                                "anEstimateSection",
                            "E"});
                table37.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'RecordingOther\']/hu" +
                                "dLineNumber",
                            "1202"});
                table37.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'RecordingOther\']/in" +
                                "cludedInApr",
                            "false"});
                table37.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'RecordingOther\']/am" +
                                "ount",
                            "600.00"});
                table37.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'RecordingOther\']/pa" +
                                "idBy",
                            "Borrower"});
#line 197
testRunner.And("Verify Xml Response Values", ((string)(null)), table37, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("With Transfer Taxes - Buyer,seller,lender with TaxingEntityJurisdiction as State." +
            "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PBI55034-RecordingElements")]
        public virtual void WithTransferTaxes_BuyerSellerLenderWithTaxingEntityJurisdictionAsState_()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("With Transfer Taxes - Buyer,seller,lender with TaxingEntityJurisdiction as State." +
                    "", null, ((string[])(null)));
#line 207
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 208
testRunner.Given("User has Request File\'RequestFiles\\RecordingFees.xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 209
testRunner.And("User has Endpoint \'quote/response\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                            "Xpath",
                            "ValuetoModify"});
                table38.AddRow(new string[] {
                            "/Response/ErnstResponse/Display/Calculation/CFPB2015/CFPBTax/TaxType",
                            "MortgageTax"});
                table38.AddRow(new string[] {
                            "/Response/ErnstResponse/Display/Calculation/CFPB2015/CFPBTax/TaxingEntities/Taxin" +
                                "gEntity/TaxingEntityJurisdiction",
                            "State"});
                table38.AddRow(new string[] {
                            "/Response/ErnstResponse/Display/Calculation/CFPB2015/CFPBTax/TaxingEntities/Taxin" +
                                "gEntity/BuyerSplit",
                            "6370.00"});
                table38.AddRow(new string[] {
                            "/Response/ErnstResponse/Display/Calculation/CFPB2015/CFPBTax/TaxingEntities/Taxin" +
                                "gEntity/SellerSplit",
                            "3000.00"});
                table38.AddRow(new string[] {
                            "/Response/ErnstResponse/Display/Calculation/CFPB2015/CFPBTax/TaxingEntities/Taxin" +
                                "gEntity/LenderSplit",
                            "2000.00"});
#line 210
testRunner.When("User has modified below  information in the  input file", ((string)(null)), table38, "When ");
#line hidden
#line 219
testRunner.When("User Posted the file with contentType as \'application/xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 220
testRunner.Then("Status code should be \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table39 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "Expectedvalue"});
                table39.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[paidBy=\'Borrower\'][name=\'Mortgag" +
                                "eTax - State- Borrower\']/referenceId",
                            "TransferMortgageTaxState"});
                table39.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[paidBy=\'Borrower\'][name=\'Mortgag" +
                                "eTax - State- Borrower\']/name",
                            "MortgageTax - State- Borrower"});
                table39.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[paidBy=\'Borrower\'][name=\'Mortgag" +
                                "eTax - State- Borrower\']/loanEstimateSection",
                            "E"});
                table39.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[paidBy=\'Borrower\'][name=\'Mortgag" +
                                "eTax - State- Borrower\']/hudLineNumber",
                            "1205"});
                table39.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[paidBy=\'Borrower\'][name=\'Mortgag" +
                                "eTax - State- Borrower\']/includedInApr",
                            "false"});
                table39.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[paidBy=\'Borrower\'][name=\'Mortgag" +
                                "eTax - State- Borrower\']/amount",
                            "6370.00"});
                table39.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[paidBy=\'Borrower\'][name=\'Mortgag" +
                                "eTax - State- Borrower\']/paidBy",
                            "Borrower"});
                table39.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[paidBy=\'Seller\'][name=\'MortgageT" +
                                "ax - State- Seller\']/referenceId",
                            "TransferMortgageTaxState"});
                table39.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[paidBy=\'Seller\'][name=\'MortgageT" +
                                "ax - State- Seller\']/name",
                            "MortgageTax - State- Seller"});
                table39.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[paidBy=\'Seller\'][name=\'MortgageT" +
                                "ax - State- Seller\']/loanEstimateSection",
                            "E"});
                table39.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[paidBy=\'Seller\'][name=\'MortgageT" +
                                "ax - State- Seller\']/hudLineNumber",
                            "1205"});
                table39.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[paidBy=\'Seller\'][name=\'MortgageT" +
                                "ax - State- Seller\']/includedInApr",
                            "false"});
                table39.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[paidBy=\'Seller\'][name=\'MortgageT" +
                                "ax - State- Seller\']/amount",
                            "3000.00"});
                table39.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[paidBy=\'Seller\'][name=\'MortgageT" +
                                "ax - State- Seller\']/paidBy",
                            "Seller"});
                table39.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[paidBy=\'Lender\'][name=\'MortgageT" +
                                "ax - State- Lender\']/referenceId",
                            "TransferMortgageTaxState"});
                table39.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[paidBy=\'Lender\'][name=\'MortgageT" +
                                "ax - State- Lender\']/name",
                            "MortgageTax - State- Lender"});
                table39.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[paidBy=\'Lender\'][name=\'MortgageT" +
                                "ax - State- Lender\']/loanEstimateSection",
                            "E"});
                table39.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[paidBy=\'Lender\'][name=\'MortgageT" +
                                "ax - State- Lender\']/hudLineNumber",
                            "1205"});
                table39.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[paidBy=\'Lender\'][name=\'MortgageT" +
                                "ax - State- Lender\']/includedInApr",
                            "false"});
                table39.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[paidBy=\'Lender\'][name=\'MortgageT" +
                                "ax - State- Lender\']/amount",
                            "2000.00"});
                table39.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[paidBy=\'Lender\'][name=\'MortgageT" +
                                "ax - State- Lender\']/paidBy",
                            "Lender"});
#line 221
testRunner.And("Verify Xml Response Values", ((string)(null)), table39, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("With Transfer Taxes - Buyer,seller,lender with TaxingEntityJurisdiction as City")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PBI55034-RecordingElements")]
        public virtual void WithTransferTaxes_BuyerSellerLenderWithTaxingEntityJurisdictionAsCity()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("With Transfer Taxes - Buyer,seller,lender with TaxingEntityJurisdiction as City", null, ((string[])(null)));
#line 246
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 247
testRunner.Given("User has Request File\'RequestFiles\\RecordingFees.xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 248
testRunner.And("User has Endpoint \'quote/response\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table40 = new TechTalk.SpecFlow.Table(new string[] {
                            "Xpath",
                            "ValuetoModify"});
                table40.AddRow(new string[] {
                            "/Response/ErnstResponse/Display/Calculation/CFPB2015/CFPBTax/TaxType",
                            "MortgageTax"});
                table40.AddRow(new string[] {
                            "/Response/ErnstResponse/Display/Calculation/CFPB2015/CFPBTax/TaxingEntities/Taxin" +
                                "gEntity/TaxingEntityJurisdiction",
                            "City"});
                table40.AddRow(new string[] {
                            "/Response/ErnstResponse/Display/Calculation/CFPB2015/CFPBTax/TaxingEntities/Taxin" +
                                "gEntity/BuyerSplit",
                            "5698.00"});
                table40.AddRow(new string[] {
                            "/Response/ErnstResponse/Display/Calculation/CFPB2015/CFPBTax/TaxingEntities/Taxin" +
                                "gEntity/SellerSplit",
                            "6000.00"});
                table40.AddRow(new string[] {
                            "/Response/ErnstResponse/Display/Calculation/CFPB2015/CFPBTax/TaxingEntities/Taxin" +
                                "gEntity/LenderSplit",
                            "2020.00"});
#line 249
testRunner.When("User has modified below  information in the  input file", ((string)(null)), table40, "When ");
#line hidden
#line 258
testRunner.When("User Posted the file with contentType as \'application/xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 259
testRunner.Then("Status code should be \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table41 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "Expectedvalue"});
                table41.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[paidBy=\'Borrower\'][name=\'Mortgag" +
                                "eTax - City- Borrower\']/referenceId",
                            "TransferMortgageTaxCity"});
                table41.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[paidBy=\'Borrower\'][name=\'Mortgag" +
                                "eTax - City- Borrower\']/name",
                            "MortgageTax - City- Borrower"});
                table41.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[paidBy=\'Borrower\'][name=\'Mortgag" +
                                "eTax - City- Borrower\']/loanEstimateSection",
                            "E"});
                table41.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[paidBy=\'Borrower\'][name=\'Mortgag" +
                                "eTax - City- Borrower\']/hudLineNumber",
                            "1204"});
                table41.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[paidBy=\'Borrower\'][name=\'Mortgag" +
                                "eTax - City- Borrower\']/includedInApr",
                            "false"});
                table41.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[paidBy=\'Borrower\'][name=\'Mortgag" +
                                "eTax - City- Borrower\']/amount",
                            "5698.00"});
                table41.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[paidBy=\'Borrower\'][name=\'Mortgag" +
                                "eTax - City- Borrower\']/paidBy",
                            "Borrower"});
                table41.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[paidBy=\'Seller\'][name=\'MortgageT" +
                                "ax - City- Seller\']/referenceId",
                            "TransferMortgageTaxCity"});
                table41.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[paidBy=\'Seller\'][name=\'MortgageT" +
                                "ax - City- Seller\']/name",
                            "MortgageTax - City- Seller"});
                table41.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[paidBy=\'Seller\'][name=\'MortgageT" +
                                "ax - City- Seller\']/loanEstimateSection",
                            "E"});
                table41.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[paidBy=\'Seller\'][name=\'MortgageT" +
                                "ax - City- Seller\']/hudLineNumber",
                            "1204"});
                table41.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[paidBy=\'Seller\'][name=\'MortgageT" +
                                "ax - City- Seller\']/includedInApr",
                            "false"});
                table41.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[paidBy=\'Seller\'][name=\'MortgageT" +
                                "ax - City- Seller\']/amount",
                            "6000.00"});
                table41.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[paidBy=\'Seller\'][name=\'MortgageT" +
                                "ax - City- Seller\']/paidBy",
                            "Seller"});
                table41.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[paidBy=\'Lender\'][name=\'MortgageT" +
                                "ax - City- Lender\']/referenceId",
                            "TransferMortgageTaxCity"});
                table41.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[paidBy=\'Lender\'][name=\'MortgageT" +
                                "ax - City- Lender\']/name",
                            "MortgageTax - City- Lender"});
                table41.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[paidBy=\'Lender\'][name=\'MortgageT" +
                                "ax - City- Lender\']/loanEstimateSection",
                            "E"});
                table41.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[paidBy=\'Lender\'][name=\'MortgageT" +
                                "ax - City- Lender\']/hudLineNumber",
                            "1204"});
                table41.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[paidBy=\'Lender\'][name=\'MortgageT" +
                                "ax - City- Lender\']/includedInApr",
                            "false"});
                table41.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[paidBy=\'Lender\'][name=\'MortgageT" +
                                "ax - City- Lender\']/amount",
                            "2020.00"});
                table41.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[paidBy=\'Lender\'][name=\'MortgageT" +
                                "ax - City- Lender\']/paidBy",
                            "Lender"});
#line 260
testRunner.And("Verify Xml Response Values", ((string)(null)), table41, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
