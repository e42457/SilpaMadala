// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.1.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Ernst.API.Blend.IntegratedTest.Feature
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class PBI55035_TransformTitleFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "PBI55035-TransformTitle.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "PBI55035-TransformTitle", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "PBI55035-TransformTitle")))
            {
                global::Ernst.API.Blend.IntegratedTest.Feature.PBI55035_TransformTitleFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("With Lender Policy All Values")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PBI55035-TransformTitle")]
        public virtual void WithLenderPolicyAllValues()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("With Lender Policy All Values", null, ((string[])(null)));
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
 testRunner.Given("User has Request File\'RequestFiles\\ErnstFeeserviceResponse.xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 6
 testRunner.And("User has Endpoint \'quote/response\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table42 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "ValuetoModify"});
                table42.AddRow(new string[] {
                            "/Response/TitleResponse/LendersPolicy/Premium",
                            "20"});
                table42.AddRow(new string[] {
                            "/Response/TitleResponse/LendersPolicy/SalesTax",
                            "30"});
                table42.AddRow(new string[] {
                            "/Response/TitleResponse/LendersPolicy/Name",
                            "ALTAExtendedCoverageLoanPolicy"});
                table42.AddRow(new string[] {
                            "/Response/TitleResponse/LendersPolicy/Splits/Split[PaidBy=\'Buyer\']/Amount",
                            "20"});
                table42.AddRow(new string[] {
                            "/Response/TitleResponse/LendersPolicy/Splits/Split[PaidBy=\'Buyer\']/SalesTax",
                            "10"});
                table42.AddRow(new string[] {
                            "/Response/TitleResponse/LendersPolicy/Splits/Split[PaidBy=\'Seller\']/Amount",
                            "40"});
                table42.AddRow(new string[] {
                            "/Response/TitleResponse/LendersPolicy/Splits/Split[PaidBy=\'Seller\']/SalesTax",
                            "50"});
#line 7
 testRunner.When("User has modified below  information in the  input file", ((string)(null)), table42, "When ");
#line hidden
#line 16
 testRunner.When("User Posted the file with contentType as \'application/xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 17
 testRunner.Then("Status code should be \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table43 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "Expectedvalue"});
                table43.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'LenderPolicy\'][paid" +
                                "By=\'Borrower\']/referenceId",
                            "LenderPolicy"});
                table43.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'LenderPolicy\'][paid" +
                                "By=\'Borrower\']/name",
                            "ALTAExtendedCoverageLoanPolicy"});
                table43.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'LenderPolicy\'][paid" +
                                "By=\'Borrower\']/loanEstimateSection",
                            "C"});
                table43.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'LenderPolicy\'][paid" +
                                "By=\'Borrower\']/hudLineNumber",
                            "1104"});
                table43.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'LenderPolicy\'][paid" +
                                "By=\'Borrower\']/includedInApr",
                            "false"});
                table43.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'LenderPolicy\'][paid" +
                                "By=\'Borrower\']/paidBy",
                            "Borrower"});
                table43.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'LenderPolicy\'][paid" +
                                "By=\'Borrower\']/amount",
                            "30"});
                table43.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'LenderPolicy\'][paid" +
                                "By=\'Seller\']/referenceId",
                            "LenderPolicy"});
                table43.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'LenderPolicy\'][paid" +
                                "By=\'Seller\']/name",
                            "ALTAExtendedCoverageLoanPolicy"});
                table43.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'LenderPolicy\'][paid" +
                                "By=\'Seller\']/loanEstimateSection",
                            "C"});
                table43.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'LenderPolicy\'][paid" +
                                "By=\'Seller\']/hudLineNumber",
                            "1104"});
                table43.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'LenderPolicy\'][paid" +
                                "By=\'Seller\']/includedInApr",
                            "false"});
                table43.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'LenderPolicy\'][paid" +
                                "By=\'Seller\']/paidBy",
                            "Seller"});
                table43.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'LenderPolicy\'][paid" +
                                "By=\'Seller\']/amount",
                            "90"});
#line 18
 testRunner.And("Verify Xml Response Values", ((string)(null)), table43, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("With Lender Policy Buyer Split")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PBI55035-TransformTitle")]
        public virtual void WithLenderPolicyBuyerSplit()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("With Lender Policy Buyer Split", null, ((string[])(null)));
#line 35
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 36
 testRunner.Given("User has Request File\'RequestFiles\\ErnstFeeserviceResponse.xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 37
 testRunner.And("User has Endpoint \'quote/response\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table44 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "ValuetoModify"});
                table44.AddRow(new string[] {
                            "/Response/TitleResponse/LendersPolicy/Splits/Split[PaidBy=\'Buyer\']/Amount",
                            "100"});
                table44.AddRow(new string[] {
                            "/Response/TitleResponse/LendersPolicy/Splits/Split[PaidBy=\'Buyer\']/SalesTax",
                            "150"});
#line 38
 testRunner.When("User has modified below  information in the  input file", ((string)(null)), table44, "When ");
#line hidden
#line 42
 testRunner.When("User Posted the file with contentType as \'application/xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 43
 testRunner.Then("Status code should be \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table45 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "Expectedvalue"});
                table45.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'LenderPolicy\'][paid" +
                                "By=\'Borrower\']/amount",
                            "250"});
#line 44
 testRunner.And("Verify Xml Response Values", ((string)(null)), table45, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Zero Lender Policy Buyer Split")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PBI55035-TransformTitle")]
        public virtual void ZeroLenderPolicyBuyerSplit()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Zero Lender Policy Buyer Split", null, ((string[])(null)));
#line 48
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 49
 testRunner.Given("User has Request File\'RequestFiles\\ErnstFeeserviceResponse.xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 50
 testRunner.And("User has Endpoint \'quote/response\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table46 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "ValuetoModify"});
                table46.AddRow(new string[] {
                            "/Response/TitleResponse/LendersPolicy/Premium",
                            "20"});
                table46.AddRow(new string[] {
                            "/Response/TitleResponse/LendersPolicy/SalesTax",
                            "30"});
                table46.AddRow(new string[] {
                            "/Response/TitleResponse/LendersPolicy/Splits/Split[PaidBy=\'Buyer\']/Amount",
                            "0"});
                table46.AddRow(new string[] {
                            "/Response/TitleResponse/LendersPolicy/Splits/Split[PaidBy=\'Buyer\']/SalesTax",
                            "0"});
#line 51
 testRunner.When("User has modified below  information in the  input file", ((string)(null)), table46, "When ");
#line hidden
#line 58
 testRunner.When("User Posted the file with contentType as \'application/xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 59
 testRunner.Then("Status code should be \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table47 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "Expectedvalue"});
                table47.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'LenderPolicy\'][paid" +
                                "By=\'Borrower\']/amount",
                            "DoesnotExists"});
#line 60
 testRunner.And("Verify Xml Response Values", ((string)(null)), table47, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Removed Lender Policy Buyer Split")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PBI55035-TransformTitle")]
        public virtual void RemovedLenderPolicyBuyerSplit()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Removed Lender Policy Buyer Split", null, ((string[])(null)));
#line 64
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 65
 testRunner.Given("User has Request File\'RequestFiles\\MissingBuyerErnstFeeServiceResponse.xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 66
 testRunner.And("User has Endpoint \'quote/response\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table48 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "ValuetoModify"});
                table48.AddRow(new string[] {
                            "/Response/TitleResponse/LendersPolicy/Premium",
                            "20"});
                table48.AddRow(new string[] {
                            "/Response/TitleResponse/LendersPolicy/SalesTax",
                            "30"});
                table48.AddRow(new string[] {
                            "/Response/TitleResponse/LendersPolicy/Splits/Split[PaidBy=\'Seller\']/Amount",
                            "100"});
                table48.AddRow(new string[] {
                            "/Response/TitleResponse/LendersPolicy/Splits/Split[PaidBy=\'Seller\']/SalesTax",
                            "120"});
#line 67
 testRunner.When("User has modified below  information in the  input file", ((string)(null)), table48, "When ");
#line hidden
#line 74
 testRunner.When("User Posted the file with contentType as \'application/xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 75
 testRunner.Then("Status code should be \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table49 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "Expectedvalue"});
                table49.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'LenderPolicy\'][paid" +
                                "By=\'Borrower\']/amount",
                            "DoesnotExists"});
                table49.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'LenderPolicy\'][paid" +
                                "By=\'Seller\']/amount",
                            "220"});
#line 76
 testRunner.And("Verify Xml Response Values", ((string)(null)), table49, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("With Lender Policy Seller Split")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PBI55035-TransformTitle")]
        public virtual void WithLenderPolicySellerSplit()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("With Lender Policy Seller Split", null, ((string[])(null)));
#line 81
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 82
 testRunner.Given("User has Request File\'RequestFiles\\ErnstFeeserviceResponse.xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 83
 testRunner.And("User has Endpoint \'quote/response\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table50 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "ValuetoModify"});
                table50.AddRow(new string[] {
                            "/Response/TitleResponse/LendersPolicy/Splits/Split[PaidBy=\'Seller\']/Amount",
                            "100"});
                table50.AddRow(new string[] {
                            "/Response/TitleResponse/LendersPolicy/Splits/Split[PaidBy=\'Seller\']/SalesTax",
                            "150"});
#line 84
 testRunner.When("User has modified below  information in the  input file", ((string)(null)), table50, "When ");
#line hidden
#line 89
 testRunner.When("User Posted the file with contentType as \'application/xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 90
 testRunner.Then("Status code should be \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table51 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "Expectedvalue"});
                table51.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'LenderPolicy\'][paid" +
                                "By=\'Seller\']/amount",
                            "250"});
#line 91
 testRunner.And("Verify Xml Response Values", ((string)(null)), table51, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Removed Lender Policy Seller Split")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PBI55035-TransformTitle")]
        public virtual void RemovedLenderPolicySellerSplit()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Removed Lender Policy Seller Split", null, ((string[])(null)));
#line 95
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 96
 testRunner.Given("User has Request File\'RequestFiles\\MissingSellerErnstFeeServiceResponse.xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 97
 testRunner.And("User has Endpoint \'quote/response\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table52 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "ValuetoModify"});
                table52.AddRow(new string[] {
                            "/Response/TitleResponse/LendersPolicy/Premium",
                            "250"});
                table52.AddRow(new string[] {
                            "/Response/TitleResponse/LendersPolicy/SalesTax",
                            "300"});
                table52.AddRow(new string[] {
                            "/Response/TitleResponse/LendersPolicy/Splits/Split[PaidBy=\'Buyer\']/Amount",
                            "600"});
                table52.AddRow(new string[] {
                            "/Response/TitleResponse/LendersPolicy/Splits/Split[PaidBy=\'Buyer\']/SalesTax",
                            "300"});
#line 98
 testRunner.When("User has modified below  information in the  input file", ((string)(null)), table52, "When ");
#line hidden
#line 105
 testRunner.When("User Posted the file with contentType as \'application/xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 106
 testRunner.Then("Status code should be \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table53 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "Expectedvalue"});
                table53.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'LenderPolicy\'][paid" +
                                "By=\'Borrower\']/amount",
                            "900"});
                table53.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'LenderPolicy\'][paid" +
                                "By=\'Seller\']",
                            "DoesnotExists"});
#line 107
 testRunner.And("Verify Xml Response Values", ((string)(null)), table53, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Zero Lender Policy Seller Split")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PBI55035-TransformTitle")]
        public virtual void ZeroLenderPolicySellerSplit()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Zero Lender Policy Seller Split", null, ((string[])(null)));
#line 112
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 113
 testRunner.Given("User has Request File\'RequestFiles\\ErnstFeeserviceResponse.xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 114
 testRunner.And("User has Endpoint \'quote/response\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table54 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "ValuetoModify"});
                table54.AddRow(new string[] {
                            "/Response/TitleResponse/LendersPolicy/Premium",
                            "250"});
                table54.AddRow(new string[] {
                            "/Response/TitleResponse/LendersPolicy/SalesTax",
                            "300"});
                table54.AddRow(new string[] {
                            "/Response/TitleResponse/LendersPolicy/Splits/Split[PaidBy=\'Seller\']/Amount",
                            "0"});
                table54.AddRow(new string[] {
                            "/Response/TitleResponse/LendersPolicy/Splits/Split[PaidBy=\'Seller\']/SalesTax",
                            "0"});
#line 115
 testRunner.When("User has modified below  information in the  input file", ((string)(null)), table54, "When ");
#line hidden
#line 122
 testRunner.When("User Posted the file with contentType as \'application/xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 123
 testRunner.Then("Status code should be \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table55 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "Expectedvalue"});
                table55.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'LenderPolicy\'][paid" +
                                "By=\'Seller\']",
                            "DoesnotExists"});
#line 124
 testRunner.And("Verify Xml Response Values", ((string)(null)), table55, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Removed Lender Policy Buyer and Seller Split")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PBI55035-TransformTitle")]
        public virtual void RemovedLenderPolicyBuyerAndSellerSplit()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Removed Lender Policy Buyer and Seller Split", null, ((string[])(null)));
#line 128
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 129
 testRunner.Given("User has Request File\'RequestFiles\\MissingBuyerSellerErnstFeeServiceResponse.xml\'" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 130
 testRunner.And("User has Endpoint \'quote/response\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table56 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "ValuetoModify"});
                table56.AddRow(new string[] {
                            "/Response/TitleResponse/LendersPolicy/Premium",
                            "-450.00"});
                table56.AddRow(new string[] {
                            "/Response/TitleResponse/LendersPolicy/SalesTax",
                            "300.00"});
#line 131
 testRunner.When("User has modified below  information in the  input file", ((string)(null)), table56, "When ");
#line hidden
#line 136
 testRunner.When("User Posted the file with contentType as \'application/xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 137
 testRunner.Then("Status code should be \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table57 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "Expectedvalue"});
                table57.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'LenderPolicy\'][paid" +
                                "By=\'Borrower\']/amount",
                            "-150.00"});
#line 138
 testRunner.And("Verify Xml Response Values", ((string)(null)), table57, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Zero Lender Policy Buyer and Seller Split with premium is zero")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PBI55035-TransformTitle")]
        public virtual void ZeroLenderPolicyBuyerAndSellerSplitWithPremiumIsZero()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Zero Lender Policy Buyer and Seller Split with premium is zero", null, ((string[])(null)));
#line 142
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 143
 testRunner.Given("User has Request File\'RequestFiles\\ErnstFeeserviceResponse.xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 144
 testRunner.And("User has Endpoint \'quote/response\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table58 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "ValuetoModify"});
                table58.AddRow(new string[] {
                            "/Response/TitleResponse/LendersPolicy/Premium",
                            "0.00"});
                table58.AddRow(new string[] {
                            "/Response/TitleResponse/LendersPolicy/SalesTax",
                            "0.00"});
                table58.AddRow(new string[] {
                            "/Response/TitleResponse/LendersPolicy/Splits/Split[PaidBy=\'Seller\']/Amount",
                            "0"});
                table58.AddRow(new string[] {
                            "/Response/TitleResponse/LendersPolicy/Splits/Split[PaidBy=\'Seller\']/SalesTax",
                            "0"});
                table58.AddRow(new string[] {
                            "/Response/TitleResponse/LendersPolicy/Splits/Split[PaidBy=\'Buyer\']/Amount",
                            "0"});
                table58.AddRow(new string[] {
                            "/Response/TitleResponse/LendersPolicy/Splits/Split[PaidBy=\'Buyer\']/SalesTax",
                            "0"});
#line 145
 testRunner.When("User has modified below  information in the  input file", ((string)(null)), table58, "When ");
#line hidden
#line 154
 testRunner.When("User Posted the file with contentType as \'application/xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 155
 testRunner.Then("Status code should be \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table59 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "Expectedvalue"});
                table59.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'LenderPolicy\'][paid" +
                                "By=\'Borrower\']/amount",
                            "0.00"});
#line 156
 testRunner.And("Verify Xml Response Values", ((string)(null)), table59, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Removed Lender Policy Buyer and Seller Split with premium amount zero")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PBI55035-TransformTitle")]
        public virtual void RemovedLenderPolicyBuyerAndSellerSplitWithPremiumAmountZero()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Removed Lender Policy Buyer and Seller Split with premium amount zero", null, ((string[])(null)));
#line 160
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 161
 testRunner.Given("User has Request File\'RequestFiles\\MissingBuyerSellerErnstFeeServiceResponse.xml\'" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 162
 testRunner.And("User has Endpoint \'quote/response\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table60 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "ValuetoModify"});
                table60.AddRow(new string[] {
                            "/Response/TitleResponse/LendersPolicy/Premium",
                            "0"});
                table60.AddRow(new string[] {
                            "/Response/TitleResponse/LendersPolicy/SalesTax",
                            "0"});
#line 163
 testRunner.When("User has modified below  information in the  input file", ((string)(null)), table60, "When ");
#line hidden
#line 168
 testRunner.When("User Posted the file with contentType as \'application/xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 169
 testRunner.Then("Status code should be \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table61 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "Expectedvalue"});
                table61.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'LenderPolicy\'][paid" +
                                "By=\'Borrower\']/amount",
                            "0"});
#line 170
 testRunner.And("Verify Xml Response Values", ((string)(null)), table61, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("With Owner Policy All Values")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PBI55035-TransformTitle")]
        public virtual void WithOwnerPolicyAllValues()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("With Owner Policy All Values", null, ((string[])(null)));
#line 178
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 179
 testRunner.Given("User has Request File\'RequestFiles\\ErnstFeeserviceResponse.xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 180
 testRunner.And("User has Endpoint \'quote/response\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table62 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "ValuetoModify"});
                table62.AddRow(new string[] {
                            "/Response/TitleResponse/OwnersPolicy/Premium",
                            "20"});
                table62.AddRow(new string[] {
                            "/Response/TitleResponse/OwnersPolicy/SalesTax",
                            "30"});
                table62.AddRow(new string[] {
                            "/Response/TitleResponse/OwnersPolicy/Name",
                            "ALTAExtendedCoverageLoanPolicy"});
                table62.AddRow(new string[] {
                            "/Response/TitleResponse/OwnersPolicy/Splits/Split[PaidBy=\'Buyer\']/Amount",
                            "20"});
                table62.AddRow(new string[] {
                            "/Response/TitleResponse/OwnersPolicy/Splits/Split[PaidBy=\'Buyer\']/SalesTax",
                            "10"});
                table62.AddRow(new string[] {
                            "/Response/TitleResponse/OwnersPolicy/Splits/Split[PaidBy=\'Seller\']/Amount",
                            "40"});
                table62.AddRow(new string[] {
                            "/Response/TitleResponse/OwnersPolicy/Splits/Split[PaidBy=\'Seller\']/SalesTax",
                            "50"});
#line 181
 testRunner.When("User has modified below  information in the  input file", ((string)(null)), table62, "When ");
#line hidden
#line 190
 testRunner.When("User Posted the file with contentType as \'application/xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 191
 testRunner.Then("Status code should be \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table63 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "Expectedvalue"});
                table63.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'OwnerPolicy\'][paidB" +
                                "y=\'Borrower\']/referenceId",
                            "OwnerPolicy"});
                table63.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'OwnerPolicy\'][paidB" +
                                "y=\'Borrower\']/name",
                            "ALTAExtendedCoverageLoanPolicy"});
                table63.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'OwnerPolicy\'][paidB" +
                                "y=\'Borrower\']/loanEstimateSection",
                            "H"});
                table63.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'OwnerPolicy\'][paidB" +
                                "y=\'Borrower\']/hudLineNumber",
                            "1103"});
                table63.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'OwnerPolicy\'][paidB" +
                                "y=\'Borrower\']/includedInApr",
                            "false"});
                table63.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'OwnerPolicy\'][paidB" +
                                "y=\'Borrower\']/paidBy",
                            "Borrower"});
                table63.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'OwnerPolicy\'][paidB" +
                                "y=\'Borrower\']/amount",
                            "30"});
                table63.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'OwnerPolicy\'][paidB" +
                                "y=\'Seller\']/referenceId",
                            "OwnerPolicy"});
                table63.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'OwnerPolicy\'][paidB" +
                                "y=\'Seller\']/name",
                            "ALTAExtendedCoverageLoanPolicy"});
                table63.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'OwnerPolicy\'][paidB" +
                                "y=\'Seller\']/loanEstimateSection",
                            "H"});
                table63.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'OwnerPolicy\'][paidB" +
                                "y=\'Seller\']/hudLineNumber",
                            "1103"});
                table63.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'OwnerPolicy\'][paidB" +
                                "y=\'Seller\']/includedInApr",
                            "false"});
                table63.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'OwnerPolicy\'][paidB" +
                                "y=\'Seller\']/paidBy",
                            "Seller"});
                table63.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'OwnerPolicy\'][paidB" +
                                "y=\'Seller\']/amount",
                            "90"});
#line 192
 testRunner.And("Verify Xml Response Values", ((string)(null)), table63, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("With Owner Policy Buyer Split")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PBI55035-TransformTitle")]
        public virtual void WithOwnerPolicyBuyerSplit()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("With Owner Policy Buyer Split", null, ((string[])(null)));
#line 209
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 210
 testRunner.Given("User has Request File\'RequestFiles\\ErnstFeeserviceResponse.xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 211
 testRunner.And("User has Endpoint \'quote/response\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table64 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "ValuetoModify"});
                table64.AddRow(new string[] {
                            "/Response/TitleResponse/OwnersPolicy/Splits/Split[PaidBy=\'Buyer\']/Amount",
                            "100"});
                table64.AddRow(new string[] {
                            "/Response/TitleResponse/OwnersPolicy/Splits/Split[PaidBy=\'Buyer\']/SalesTax",
                            "150"});
#line 212
 testRunner.When("User has modified below  information in the  input file", ((string)(null)), table64, "When ");
#line hidden
#line 216
 testRunner.When("User Posted the file with contentType as \'application/xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 217
 testRunner.Then("Status code should be \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table65 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "Expectedvalue"});
                table65.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'OwnerPolicy\'][paidB" +
                                "y=\'Borrower\']/amount",
                            "250"});
#line 218
 testRunner.And("Verify Xml Response Values", ((string)(null)), table65, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Zero Owner Policy Buyer Split")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PBI55035-TransformTitle")]
        public virtual void ZeroOwnerPolicyBuyerSplit()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Zero Owner Policy Buyer Split", null, ((string[])(null)));
#line 222
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 223
 testRunner.Given("User has Request File\'RequestFiles\\ErnstFeeserviceResponse.xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 224
 testRunner.And("User has Endpoint \'quote/response\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table66 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "ValuetoModify"});
                table66.AddRow(new string[] {
                            "/Response/TitleResponse/OwnersPolicy/Premium",
                            "20"});
                table66.AddRow(new string[] {
                            "/Response/TitleResponse/OwnersPolicy/SalesTax",
                            "30"});
                table66.AddRow(new string[] {
                            "/Response/TitleResponse/OwnersPolicy/Splits/Split[PaidBy=\'Buyer\']/Amount",
                            "0"});
                table66.AddRow(new string[] {
                            "/Response/TitleResponse/OwnersPolicy/Splits/Split[PaidBy=\'Buyer\']/SalesTax",
                            "0"});
#line 225
 testRunner.When("User has modified below  information in the  input file", ((string)(null)), table66, "When ");
#line hidden
#line 232
 testRunner.When("User Posted the file with contentType as \'application/xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 233
 testRunner.Then("Status code should be \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table67 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "Expectedvalue"});
                table67.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'OwnerPolicy\'][paidB" +
                                "y=\'Borrower\']/amount",
                            "DoesnotExists"});
#line 234
 testRunner.And("Verify Xml Response Values", ((string)(null)), table67, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Removed Owner Policy Buyer Split")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PBI55035-TransformTitle")]
        public virtual void RemovedOwnerPolicyBuyerSplit()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Removed Owner Policy Buyer Split", null, ((string[])(null)));
#line 238
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 239
 testRunner.Given("User has Request File\'RequestFiles\\MissingBuyerErnstFeeServiceResponse.xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 240
 testRunner.And("User has Endpoint \'quote/response\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table68 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "ValuetoModify"});
                table68.AddRow(new string[] {
                            "/Response/TitleResponse/OwnersPolicy/Premium",
                            "20"});
                table68.AddRow(new string[] {
                            "/Response/TitleResponse/OwnersPolicy/SalesTax",
                            "30"});
                table68.AddRow(new string[] {
                            "/Response/TitleResponse/OwnersPolicy/Splits/Split[PaidBy=\'Seller\']/Amount",
                            "22.36"});
                table68.AddRow(new string[] {
                            "/Response/TitleResponse/OwnersPolicy/Splits/Split[PaidBy=\'Seller\']/SalesTax",
                            "100.65"});
#line 241
 testRunner.When("User has modified below  information in the  input file", ((string)(null)), table68, "When ");
#line hidden
#line 248
 testRunner.When("User Posted the file with contentType as \'application/xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 249
 testRunner.Then("Status code should be \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table69 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "Expectedvalue"});
                table69.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'OwnerPolicy\'][paidB" +
                                "y=\'Borrower\']/amount",
                            "DoesnotExists"});
                table69.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'OwnerPolicy\'][paidB" +
                                "y=\'Seller\']/amount",
                            "123.01"});
#line 250
 testRunner.And("Verify Xml Response Values", ((string)(null)), table69, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("With Owner Policy Seller Split")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PBI55035-TransformTitle")]
        public virtual void WithOwnerPolicySellerSplit()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("With Owner Policy Seller Split", null, ((string[])(null)));
#line 255
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 256
 testRunner.Given("User has Request File\'RequestFiles\\ErnstFeeserviceResponse.xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 257
 testRunner.And("User has Endpoint \'quote/response\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table70 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "ValuetoModify"});
                table70.AddRow(new string[] {
                            "/Response/TitleResponse/OwnersPolicy/Splits/Split[PaidBy=\'Seller\']/Amount",
                            "100"});
                table70.AddRow(new string[] {
                            "/Response/TitleResponse/OwnersPolicy/Splits/Split[PaidBy=\'Seller\']/SalesTax",
                            "150"});
#line 258
 testRunner.When("User has modified below  information in the  input file", ((string)(null)), table70, "When ");
#line hidden
#line 263
 testRunner.When("User Posted the file with contentType as \'application/xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 264
 testRunner.Then("Status code should be \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table71 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "Expectedvalue"});
                table71.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'OwnerPolicy\'][paidB" +
                                "y=\'Seller\']/amount",
                            "250"});
#line 265
 testRunner.And("Verify Xml Response Values", ((string)(null)), table71, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Removed Owner Policy Seller Split")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PBI55035-TransformTitle")]
        public virtual void RemovedOwnerPolicySellerSplit()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Removed Owner Policy Seller Split", null, ((string[])(null)));
#line 269
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 270
 testRunner.Given("User has Request File\'RequestFiles\\MissingSellerErnstFeeServiceResponse.xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 271
 testRunner.And("User has Endpoint \'quote/response\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table72 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "ValuetoModify"});
                table72.AddRow(new string[] {
                            "/Response/TitleResponse/OwnersPolicy/Premium",
                            "250"});
                table72.AddRow(new string[] {
                            "/Response/TitleResponse/OwnersPolicy/SalesTax",
                            "300"});
                table72.AddRow(new string[] {
                            "/Response/TitleResponse/OwnersPolicy/Splits/Split[PaidBy=\'Buyer\']/Amount",
                            "100"});
                table72.AddRow(new string[] {
                            "/Response/TitleResponse/OwnersPolicy/Splits/Split[PaidBy=\'Buyer\']/SalesTax",
                            "25"});
#line 272
 testRunner.When("User has modified below  information in the  input file", ((string)(null)), table72, "When ");
#line hidden
#line 279
 testRunner.When("User Posted the file with contentType as \'application/xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 280
 testRunner.Then("Status code should be \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table73 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "Expectedvalue"});
                table73.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'OwnerPolicy\'][paidB" +
                                "y=\'Seller\']/amount",
                            "DoesnotExists"});
                table73.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'OwnerPolicy\'][paidB" +
                                "y=\'Borrower\']/amount",
                            "125"});
#line 281
 testRunner.And("Verify Xml Response Values", ((string)(null)), table73, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Zero Owner Policy Seller Split")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PBI55035-TransformTitle")]
        public virtual void ZeroOwnerPolicySellerSplit()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Zero Owner Policy Seller Split", null, ((string[])(null)));
#line 286
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 287
 testRunner.Given("User has Request File\'RequestFiles\\ErnstFeeserviceResponse.xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 288
 testRunner.And("User has Endpoint \'quote/response\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table74 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "ValuetoModify"});
                table74.AddRow(new string[] {
                            "/Response/TitleResponse/OwnersPolicy/Premium",
                            "250"});
                table74.AddRow(new string[] {
                            "/Response/TitleResponse/OwnersPolicy/SalesTax",
                            "300"});
                table74.AddRow(new string[] {
                            "/Response/TitleResponse/OwnersPolicy/Splits/Split[PaidBy=\'Seller\']/Amount",
                            "0"});
                table74.AddRow(new string[] {
                            "/Response/TitleResponse/OwnersPolicy/Splits/Split[PaidBy=\'Seller\']/SalesTax",
                            "0"});
#line 289
 testRunner.When("User has modified below  information in the  input file", ((string)(null)), table74, "When ");
#line hidden
#line 296
 testRunner.When("User Posted the file with contentType as \'application/xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 297
 testRunner.Then("Status code should be \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table75 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "Expectedvalue"});
                table75.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'OwnerPolicy\'][paidB" +
                                "y=\'Seller\']/amount",
                            "DoesnotExists"});
#line 298
 testRunner.And("Verify Xml Response Values", ((string)(null)), table75, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Removed Owner Policy Buyer and Seller Split")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PBI55035-TransformTitle")]
        public virtual void RemovedOwnerPolicyBuyerAndSellerSplit()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Removed Owner Policy Buyer and Seller Split", null, ((string[])(null)));
#line 302
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 303
 testRunner.Given("User has Request File\'RequestFiles\\MissingBuyerSellerErnstFeeServiceResponse.xml\'" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 304
 testRunner.And("User has Endpoint \'quote/response\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table76 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "ValuetoModify"});
                table76.AddRow(new string[] {
                            "/Response/TitleResponse/OwnersPolicy/Premium",
                            "250"});
                table76.AddRow(new string[] {
                            "/Response/TitleResponse/OwnersPolicy/SalesTax",
                            "300"});
#line 305
 testRunner.When("User has modified below  information in the  input file", ((string)(null)), table76, "When ");
#line hidden
#line 310
 testRunner.When("User Posted the file with contentType as \'application/xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 311
 testRunner.Then("Status code should be \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table77 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "Expectedvalue"});
                table77.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'OwnerPolicy\'][paidB" +
                                "y=\'Borrower\']/amount",
                            "550"});
#line 312
 testRunner.And("Verify Xml Response Values", ((string)(null)), table77, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Zero Owner Policy Buyer and Seller Split with premium is zero")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PBI55035-TransformTitle")]
        public virtual void ZeroOwnerPolicyBuyerAndSellerSplitWithPremiumIsZero()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Zero Owner Policy Buyer and Seller Split with premium is zero", null, ((string[])(null)));
#line 316
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 317
 testRunner.Given("User has Request File\'RequestFiles\\ErnstFeeserviceResponse.xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 318
 testRunner.And("User has Endpoint \'quote/response\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table78 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "ValuetoModify"});
                table78.AddRow(new string[] {
                            "/Response/TitleResponse/OwnersPolicy/Premium",
                            "0.00"});
                table78.AddRow(new string[] {
                            "/Response/TitleResponse/OwnersPolicy/SalesTax",
                            "0.00"});
                table78.AddRow(new string[] {
                            "/Response/TitleResponse/OwnersPolicy/Splits/Split[PaidBy=\'Seller\']/Amount",
                            "0"});
                table78.AddRow(new string[] {
                            "/Response/TitleResponse/OwnersPolicy/Splits/Split[PaidBy=\'Seller\']/SalesTax",
                            "0"});
                table78.AddRow(new string[] {
                            "/Response/TitleResponse/OwnersPolicy/Splits/Split[PaidBy=\'Buyer\']/Amount",
                            "0"});
                table78.AddRow(new string[] {
                            "/Response/TitleResponse/OwnersPolicy/Splits/Split[PaidBy=\'Buyer\']/SalesTax",
                            "0"});
#line 319
 testRunner.When("User has modified below  information in the  input file", ((string)(null)), table78, "When ");
#line hidden
#line 328
 testRunner.When("User Posted the file with contentType as \'application/xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 329
 testRunner.Then("Status code should be \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table79 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "Expectedvalue"});
                table79.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'OwnerPolicy\'][paidB" +
                                "y=\'Borrower\']/amount",
                            "0.00"});
#line 330
 testRunner.And("Verify Xml Response Values", ((string)(null)), table79, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Removed Lender Owner Buyer and Seller Split with premium amount zero")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PBI55035-TransformTitle")]
        public virtual void RemovedLenderOwnerBuyerAndSellerSplitWithPremiumAmountZero()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Removed Lender Owner Buyer and Seller Split with premium amount zero", null, ((string[])(null)));
#line 334
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 335
 testRunner.Given("User has Request File\'RequestFiles\\MissingBuyerSellerErnstFeeServiceResponse.xml\'" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 336
 testRunner.And("User has Endpoint \'quote/response\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table80 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "ValuetoModify"});
                table80.AddRow(new string[] {
                            "/Response/TitleResponse/OwnersPolicy/Premium",
                            "0"});
                table80.AddRow(new string[] {
                            "/Response/TitleResponse/OwnersPolicy/SalesTax",
                            "0"});
#line 337
 testRunner.When("User has modified below  information in the  input file", ((string)(null)), table80, "When ");
#line hidden
#line 342
 testRunner.When("User Posted the file with contentType as \'application/xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 343
 testRunner.Then("Status code should be \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table81 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "Expectedvalue"});
                table81.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'OwnerPolicy\'][paidB" +
                                "y=\'Borrower\']/amount",
                            "0"});
#line 344
 testRunner.And("Verify Xml Response Values", ((string)(null)), table81, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("With SettlementFee All Values")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PBI55035-TransformTitle")]
        public virtual void WithSettlementFeeAllValues()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("With SettlementFee All Values", null, ((string[])(null)));
#line 351
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 352
 testRunner.Given("User has Request File\'RequestFiles\\ErnstFeeserviceResponse.xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 353
 testRunner.And("User has Endpoint \'quote/response\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table82 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "ValuetoModify"});
                table82.AddRow(new string[] {
                            "/Response/TitleResponse/ItemizedSettlementFees/SettlementFee[Code=\'TitleAttorneyD" +
                                "ocPrepFee\']/Code",
                            "TitleAttorneyDocPrepFee"});
                table82.AddRow(new string[] {
                            "/Response/TitleResponse/ItemizedSettlementFees/SettlementFee[Code=\'TitleAttorneyD" +
                                "ocPrepFee\']/Amount",
                            "20"});
                table82.AddRow(new string[] {
                            "/Response/TitleResponse/ItemizedSettlementFees/SettlementFee[Code=\'TitleAttorneyD" +
                                "ocPrepFee\']/SalesTax",
                            "30"});
                table82.AddRow(new string[] {
                            "/Response/TitleResponse/ItemizedSettlementFees/SettlementFee[Code=\'TitleAttorneyD" +
                                "ocPrepFee\']/Name",
                            "Title Attorney Doc Prep Fee"});
                table82.AddRow(new string[] {
                            "/Response/TitleResponse/ItemizedSettlementFees/SettlementFee[Code=\'TitleAttorneyD" +
                                "ocPrepFee\']/Splits/Split[PaidBy=\'Buyer\']/Amount",
                            "20"});
                table82.AddRow(new string[] {
                            "/Response/TitleResponse/ItemizedSettlementFees/SettlementFee[Code=\'TitleAttorneyD" +
                                "ocPrepFee\']/Splits/Split[PaidBy=\'Buyer\']/SalesTax",
                            "10.39"});
                table82.AddRow(new string[] {
                            "/Response/TitleResponse/ItemizedSettlementFees/SettlementFee[Code=\'TitleAttorneyD" +
                                "ocPrepFee\']/Splits/Split[PaidBy=\'Seller\']/Amount",
                            "40.00"});
                table82.AddRow(new string[] {
                            "/Response/TitleResponse/ItemizedSettlementFees/SettlementFee[Code=\'TitleAttorneyD" +
                                "ocPrepFee\']/Splits/Split[PaidBy=\'Seller\']/SalesTax",
                            "110.00"});
#line 354
 testRunner.When("User has modified below  information in the  input file", ((string)(null)), table82, "When ");
#line hidden
#line 364
 testRunner.When("User Posted the file with contentType as \'application/xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 365
 testRunner.Then("Status code should be \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table83 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "Expectedvalue"});
                table83.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'TitleAttorneyDocPre" +
                                "pFee\'][paidBy=\'Borrower\']/referenceId",
                            "TitleAttorneyDocPrepFee"});
                table83.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'TitleAttorneyDocPre" +
                                "pFee\'][paidBy=\'Borrower\']/name",
                            "Title Attorney Doc Prep Fee"});
                table83.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'TitleAttorneyDocPre" +
                                "pFee\'][paidBy=\'Borrower\']/loanEstimateSection",
                            "C"});
                table83.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'TitleAttorneyDocPre" +
                                "pFee\'][paidBy=\'Borrower\']/hudLineNumber",
                            "1101"});
                table83.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'TitleAttorneyDocPre" +
                                "pFee\'][paidBy=\'Borrower\']/includedInApr",
                            "false"});
                table83.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'TitleAttorneyDocPre" +
                                "pFee\'][paidBy=\'Borrower\']/paidBy",
                            "Borrower"});
                table83.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'TitleAttorneyDocPre" +
                                "pFee\'][paidBy=\'Borrower\']/amount",
                            "30.39"});
                table83.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'TitleAttorneyDocPre" +
                                "pFee\'][paidBy=\'Seller\']/referenceId",
                            "TitleAttorneyDocPrepFee"});
                table83.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'TitleAttorneyDocPre" +
                                "pFee\'][paidBy=\'Seller\']/name",
                            "Title Attorney Doc Prep Fee"});
                table83.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'TitleAttorneyDocPre" +
                                "pFee\'][paidBy=\'Seller\']/loanEstimateSection",
                            "C"});
                table83.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'TitleAttorneyDocPre" +
                                "pFee\'][paidBy=\'Seller\']/hudLineNumber",
                            "1101"});
                table83.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'TitleAttorneyDocPre" +
                                "pFee\'][paidBy=\'Seller\']/includedInApr",
                            "false"});
                table83.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'TitleAttorneyDocPre" +
                                "pFee\'][paidBy=\'Seller\']/paidBy",
                            "Seller"});
                table83.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'TitleAttorneyDocPre" +
                                "pFee\'][paidBy=\'Seller\']/amount",
                            "150.00"});
#line 366
 testRunner.And("Verify Xml Response Values", ((string)(null)), table83, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("With SettlementFee Buyer Split")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PBI55035-TransformTitle")]
        public virtual void WithSettlementFeeBuyerSplit()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("With SettlementFee Buyer Split", null, ((string[])(null)));
#line 383
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 384
 testRunner.Given("User has Request File\'RequestFiles\\ErnstFeeserviceResponse.xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 385
 testRunner.And("User has Endpoint \'quote/response\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table84 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "ValuetoModify"});
                table84.AddRow(new string[] {
                            "/Response/TitleResponse/ItemizedSettlementFees/SettlementFee[Code=\'TitleAttorneyD" +
                                "ocPrepFee\']/Splits/Split[PaidBy=\'Buyer\']/Amount",
                            "100.33"});
                table84.AddRow(new string[] {
                            "/Response/TitleResponse/ItemizedSettlementFees/SettlementFee[Code=\'TitleAttorneyD" +
                                "ocPrepFee\']/Splits/Split[PaidBy=\'Buyer\']/SalesTax",
                            "150.20"});
#line 386
 testRunner.When("User has modified below  information in the  input file", ((string)(null)), table84, "When ");
#line hidden
#line 390
 testRunner.When("User Posted the file with contentType as \'application/xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 391
 testRunner.Then("Status code should be \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table85 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "Expectedvalue"});
                table85.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'TitleAttorneyDocPre" +
                                "pFee\'][paidBy=\'Borrower\']/amount",
                            "250.53"});
#line 392
 testRunner.And("Verify Xml Response Values", ((string)(null)), table85, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Zero SettlementFee Buyer Split")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PBI55035-TransformTitle")]
        public virtual void ZeroSettlementFeeBuyerSplit()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Zero SettlementFee Buyer Split", null, ((string[])(null)));
#line 396
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 397
 testRunner.Given("User has Request File\'RequestFiles\\ErnstFeeserviceResponse.xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 398
 testRunner.And("User has Endpoint \'quote/response\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table86 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "ValuetoModify"});
                table86.AddRow(new string[] {
                            "/Response/TitleResponse/ItemizedSettlementFees/SettlementFee[Code=\'TitleAttorneyD" +
                                "ocPrepFee\']/Amount",
                            "20"});
                table86.AddRow(new string[] {
                            "/Response/TitleResponse/ItemizedSettlementFees/SettlementFee[Code=\'TitleAttorneyD" +
                                "ocPrepFee\']/SalesTax",
                            "30"});
                table86.AddRow(new string[] {
                            "/Response/TitleResponse/ItemizedSettlementFees/SettlementFee[Code=\'TitleAttorneyD" +
                                "ocPrepFee\']/Splits/Split[PaidBy=\'Buyer\']/Amount",
                            "0"});
                table86.AddRow(new string[] {
                            "/Response/TitleResponse/ItemizedSettlementFees/SettlementFee[Code=\'TitleAttorneyD" +
                                "ocPrepFee\']/Splits/Split[PaidBy=\'Buyer\']/SalesTax",
                            "0"});
#line 399
 testRunner.When("User has modified below  information in the  input file", ((string)(null)), table86, "When ");
#line hidden
#line 406
 testRunner.When("User Posted the file with contentType as \'application/xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 407
 testRunner.Then("Status code should be \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table87 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "Expectedvalue"});
                table87.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'TitleAttorneyDocPre" +
                                "pFee\'][paidBy=\'Borrower\']/amount",
                            "DoesnotExists"});
#line 408
 testRunner.And("Verify Xml Response Values", ((string)(null)), table87, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Removed SettlementFee Buyer Split")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PBI55035-TransformTitle")]
        public virtual void RemovedSettlementFeeBuyerSplit()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Removed SettlementFee Buyer Split", null, ((string[])(null)));
#line 412
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 413
 testRunner.Given("User has Request File\'RequestFiles\\MissingBuyerErnstFeeServiceResponse.xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 414
 testRunner.And("User has Endpoint \'quote/response\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table88 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "ValuetoModify"});
                table88.AddRow(new string[] {
                            "/Response/TitleResponse/ItemizedSettlementFees/SettlementFee[Code=\'TitleAttorneyD" +
                                "ocPrepFee\']/Amount",
                            "20"});
                table88.AddRow(new string[] {
                            "/Response/TitleResponse/ItemizedSettlementFees/SettlementFee[Code=\'TitleAttorneyD" +
                                "ocPrepFee\']/SalesTax",
                            "30"});
                table88.AddRow(new string[] {
                            "/Response/TitleResponse/ItemizedSettlementFees/SettlementFee[Code=\'TitleAttorneyD" +
                                "ocPrepFee\']/Splits/Split[PaidBy=\'Seller\']/Amount",
                            "3000"});
                table88.AddRow(new string[] {
                            "/Response/TitleResponse/ItemizedSettlementFees/SettlementFee[Code=\'TitleAttorneyD" +
                                "ocPrepFee\']/Splits/Split[PaidBy=\'Seller\']/SalesTax",
                            "4000"});
#line 415
 testRunner.When("User has modified below  information in the  input file", ((string)(null)), table88, "When ");
#line hidden
#line 422
 testRunner.When("User Posted the file with contentType as \'application/xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 423
 testRunner.Then("Status code should be \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table89 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "Expectedvalue"});
                table89.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'TitleAttorneyDocPre" +
                                "pFee\'][paidBy=\'Borrower\']/amount",
                            "DoesnotExists"});
                table89.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'TitleAttorneyDocPre" +
                                "pFee\'][paidBy=\'Seller\']/amount",
                            "7000"});
#line 424
 testRunner.And("Verify Xml Response Values", ((string)(null)), table89, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("With SettlementFee Seller Split")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PBI55035-TransformTitle")]
        public virtual void WithSettlementFeeSellerSplit()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("With SettlementFee Seller Split", null, ((string[])(null)));
#line 429
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 430
 testRunner.Given("User has Request File\'RequestFiles\\ErnstFeeserviceResponse.xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 431
 testRunner.And("User has Endpoint \'quote/response\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table90 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "ValuetoModify"});
                table90.AddRow(new string[] {
                            "/Response/TitleResponse/ItemizedSettlementFees/SettlementFee[Code=\'TitleAttorneyD" +
                                "ocPrepFee\']/Splits/Split[PaidBy=\'Seller\']/Amount",
                            "100"});
                table90.AddRow(new string[] {
                            "/Response/TitleResponse/ItemizedSettlementFees/SettlementFee[Code=\'TitleAttorneyD" +
                                "ocPrepFee\']/Splits/Split[PaidBy=\'Seller\']/SalesTax",
                            "150"});
#line 432
 testRunner.When("User has modified below  information in the  input file", ((string)(null)), table90, "When ");
#line hidden
#line 437
 testRunner.When("User Posted the file with contentType as \'application/xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 438
 testRunner.Then("Status code should be \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table91 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "Expectedvalue"});
                table91.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'TitleAttorneyDocPre" +
                                "pFee\'][paidBy=\'Seller\']/amount",
                            "250"});
#line 439
 testRunner.And("Verify Xml Response Values", ((string)(null)), table91, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Removed SettlementFee Seller Split")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PBI55035-TransformTitle")]
        public virtual void RemovedSettlementFeeSellerSplit()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Removed SettlementFee Seller Split", null, ((string[])(null)));
#line 443
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 444
 testRunner.Given("User has Request File\'RequestFiles\\MissingSellerErnstFeeServiceResponse.xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 445
 testRunner.And("User has Endpoint \'quote/response\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table92 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "ValuetoModify"});
                table92.AddRow(new string[] {
                            "/Response/TitleResponse/ItemizedSettlementFees/SettlementFee[Code=\'TitleAttorneyD" +
                                "ocPrepFee\']/Amount",
                            "250"});
                table92.AddRow(new string[] {
                            "/Response/TitleResponse/ItemizedSettlementFees/SettlementFee[Code=\'TitleAttorneyD" +
                                "ocPrepFee\']/SalesTax",
                            "300"});
                table92.AddRow(new string[] {
                            "/Response/TitleResponse/ItemizedSettlementFees/SettlementFee[Code=\'TitleAttorneyD" +
                                "ocPrepFee\']/Splits/Split[PaidBy=\'Buyer\']/Amount",
                            "120"});
                table92.AddRow(new string[] {
                            "/Response/TitleResponse/ItemizedSettlementFees/SettlementFee[Code=\'TitleAttorneyD" +
                                "ocPrepFee\']/Splits/Split[PaidBy=\'Buyer\']/SalesTax",
                            "240"});
#line 446
 testRunner.When("User has modified below  information in the  input file", ((string)(null)), table92, "When ");
#line hidden
#line 453
 testRunner.When("User Posted the file with contentType as \'application/xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 454
 testRunner.Then("Status code should be \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table93 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "Expectedvalue"});
                table93.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'TitleAttorneyDocPre" +
                                "pFee\'][paidBy=\'Seller\']/amount",
                            "DoesnotExists"});
                table93.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'TitleAttorneyDocPre" +
                                "pFee\'][paidBy=\'Borrower\']/amount",
                            "360"});
#line 455
 testRunner.And("Verify Xml Response Values", ((string)(null)), table93, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Zero SettlementFee Seller Split")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PBI55035-TransformTitle")]
        public virtual void ZeroSettlementFeeSellerSplit()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Zero SettlementFee Seller Split", null, ((string[])(null)));
#line 460
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 461
 testRunner.Given("User has Request File\'RequestFiles\\ErnstFeeserviceResponse.xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 462
 testRunner.And("User has Endpoint \'quote/response\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table94 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "ValuetoModify"});
                table94.AddRow(new string[] {
                            "/Response/TitleResponse/ItemizedSettlementFees/SettlementFee[Code=\'TitleAttorneyD" +
                                "ocPrepFee\']/Amount",
                            "250"});
                table94.AddRow(new string[] {
                            "/Response/TitleResponse/ItemizedSettlementFees/SettlementFee[Code=\'TitleAttorneyD" +
                                "ocPrepFee\']/SalesTax",
                            "300"});
                table94.AddRow(new string[] {
                            "/Response/TitleResponse/ItemizedSettlementFees/SettlementFee[Code=\'TitleAttorneyD" +
                                "ocPrepFee\']/Splits/Split[PaidBy=\'Seller\']/Amount",
                            "0"});
                table94.AddRow(new string[] {
                            "/Response/TitleResponse/ItemizedSettlementFees/SettlementFee[Code=\'TitleAttorneyD" +
                                "ocPrepFee\']/Splits/Split[PaidBy=\'Seller\']/SalesTax",
                            "0"});
#line 463
 testRunner.When("User has modified below  information in the  input file", ((string)(null)), table94, "When ");
#line hidden
#line 470
 testRunner.When("User Posted the file with contentType as \'application/xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 471
 testRunner.Then("Status code should be \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table95 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "Expectedvalue"});
                table95.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'TitleAttorneyDocPre" +
                                "pFee\'][paidBy=\'Seller\']/amount",
                            "DoesnotExists"});
#line 472
 testRunner.And("Verify Xml Response Values", ((string)(null)), table95, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Removed SettlementFee Buyer and Seller Split")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PBI55035-TransformTitle")]
        public virtual void RemovedSettlementFeeBuyerAndSellerSplit()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Removed SettlementFee Buyer and Seller Split", null, ((string[])(null)));
#line 476
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 477
 testRunner.Given("User has Request File\'RequestFiles\\MissingBuyerSellerErnstFeeServiceResponse.xml\'" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 478
 testRunner.And("User has Endpoint \'quote/response\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table96 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "ValuetoModify"});
                table96.AddRow(new string[] {
                            "/Response/TitleResponse/ItemizedSettlementFees/SettlementFee[Code=\'TitleAttorneyD" +
                                "ocPrepFee\']/Amount",
                            "250"});
                table96.AddRow(new string[] {
                            "/Response/TitleResponse/ItemizedSettlementFees/SettlementFee[Code=\'TitleAttorneyD" +
                                "ocPrepFee\']/SalesTax",
                            "300"});
#line 479
 testRunner.When("User has modified below  information in the  input file", ((string)(null)), table96, "When ");
#line hidden
#line 483
 testRunner.When("User Posted the file with contentType as \'application/xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 484
 testRunner.Then("Status code should be \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table97 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "Expectedvalue"});
                table97.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'TitleAttorneyDocPre" +
                                "pFee\'][paidBy=\'Borrower\']/amount",
                            "550"});
#line 485
 testRunner.And("Verify Xml Response Values", ((string)(null)), table97, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Zero SettlementFee Buyer and Seller Split with premium is zero")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PBI55035-TransformTitle")]
        public virtual void ZeroSettlementFeeBuyerAndSellerSplitWithPremiumIsZero()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Zero SettlementFee Buyer and Seller Split with premium is zero", null, ((string[])(null)));
#line 489
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 490
 testRunner.Given("User has Request File\'RequestFiles\\ErnstFeeserviceResponse.xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 491
 testRunner.And("User has Endpoint \'quote/response\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table98 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "ValuetoModify"});
                table98.AddRow(new string[] {
                            "/Response/TitleResponse/ItemizedSettlementFees/SettlementFee[Code=\'TitleAttorneyD" +
                                "ocPrepFee\']/Amount",
                            "0.00"});
                table98.AddRow(new string[] {
                            "/Response/TitleResponse/ItemizedSettlementFees/SettlementFee[Code=\'TitleAttorneyD" +
                                "ocPrepFee\']/SalesTax",
                            "0.00"});
                table98.AddRow(new string[] {
                            "/Response/TitleResponse/ItemizedSettlementFees/SettlementFee[Code=\'TitleAttorneyD" +
                                "ocPrepFee\']/Splits/Split[PaidBy=\'Buyer\']/Amount",
                            "0"});
                table98.AddRow(new string[] {
                            "/Response/TitleResponse/ItemizedSettlementFees/SettlementFee[Code=\'TitleAttorneyD" +
                                "ocPrepFee\']/Splits/Split[PaidBy=\'Buyer\']/SalesTax",
                            "0"});
                table98.AddRow(new string[] {
                            "/Response/TitleResponse/ItemizedSettlementFees/SettlementFee[Code=\'TitleAttorneyD" +
                                "ocPrepFee\']/Splits/Split[PaidBy=\'Seller\']/Amount",
                            "0"});
                table98.AddRow(new string[] {
                            "/Response/TitleResponse/ItemizedSettlementFees/SettlementFee[Code=\'TitleAttorneyD" +
                                "ocPrepFee\']/Splits/Split[PaidBy=\'Seller\']/SalesTax",
                            "0"});
#line 492
 testRunner.When("User has modified below  information in the  input file", ((string)(null)), table98, "When ");
#line hidden
#line 500
 testRunner.When("User Posted the file with contentType as \'application/xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 501
 testRunner.Then("Status code should be \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table99 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "Expectedvalue"});
                table99.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'TitleAttorneyDocPre" +
                                "pFee\'][paidBy=\'Borrower\']/amount",
                            "0.00"});
#line 502
 testRunner.And("Verify Xml Response Values", ((string)(null)), table99, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Removed SettlementFee Buyer and Seller Split with premium amount zero")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PBI55035-TransformTitle")]
        public virtual void RemovedSettlementFeeBuyerAndSellerSplitWithPremiumAmountZero()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Removed SettlementFee Buyer and Seller Split with premium amount zero", null, ((string[])(null)));
#line 506
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 507
 testRunner.Given("User has Request File\'RequestFiles\\MissingBuyerSellerErnstFeeServiceResponse.xml\'" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 508
 testRunner.And("User has Endpoint \'quote/response\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table100 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "ValuetoModify"});
                table100.AddRow(new string[] {
                            "/Response/TitleResponse/ItemizedSettlementFees/SettlementFee[Code=\'TitleAttorneyD" +
                                "ocPrepFee\']/Amount",
                            "0"});
                table100.AddRow(new string[] {
                            "/Response/TitleResponse/ItemizedSettlementFees/SettlementFee[Code=\'TitleAttorneyD" +
                                "ocPrepFee\']/SalesTax",
                            "0"});
#line 509
 testRunner.When("User has modified below  information in the  input file", ((string)(null)), table100, "When ");
#line hidden
#line 513
 testRunner.When("User Posted the file with contentType as \'application/xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 514
 testRunner.Then("Status code should be \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table101 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "Expectedvalue"});
                table101.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'TitleAttorneyDocPre" +
                                "pFee\'][paidBy=\'Borrower\']/amount",
                            "0"});
#line 515
 testRunner.And("Verify Xml Response Values", ((string)(null)), table101, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("With Endorsements All Values")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PBI55035-TransformTitle")]
        public virtual void WithEndorsementsAllValues()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("With Endorsements All Values", null, ((string[])(null)));
#line 522
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 523
 testRunner.Given("User has Request File\'RequestFiles\\ErnstFeeserviceResponse.xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 524
 testRunner.And("User has Endpoint \'quote/response\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table102 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "ValuetoModify"});
                table102.AddRow(new string[] {
                            "/Response/TitleResponse/Endorsements/Endorsement[Code=\'0000949\']/Code",
                            "0000949"});
                table102.AddRow(new string[] {
                            "/Response/TitleResponse/Endorsements/Endorsement[Code=\'0000949\']/Amount",
                            "20"});
                table102.AddRow(new string[] {
                            "/Response/TitleResponse/Endorsements/Endorsement[Code=\'0000949\']/SalesTax",
                            "30"});
                table102.AddRow(new string[] {
                            "/Response/TitleResponse/Endorsements/Endorsement[Code=\'0000949\']/Name",
                            "TIRSA Waiver of Arbitration (Loan Policy)"});
                table102.AddRow(new string[] {
                            "/Response/TitleResponse/Endorsements/Endorsement[Code=\'0000949\']/Splits/Split[Pai" +
                                "dBy=\'Buyer\']/Amount",
                            "20"});
                table102.AddRow(new string[] {
                            "/Response/TitleResponse/Endorsements/Endorsement[Code=\'0000949\']/Splits/Split[Pai" +
                                "dBy=\'Buyer\']/SalesTax",
                            "10.39"});
                table102.AddRow(new string[] {
                            "/Response/TitleResponse/Endorsements/Endorsement[Code=\'0000949\']/Splits/Split[Pai" +
                                "dBy=\'Seller\']/Amount",
                            "40.00"});
                table102.AddRow(new string[] {
                            "/Response/TitleResponse/Endorsements/Endorsement[Code=\'0000949\']/Splits/Split[Pai" +
                                "dBy=\'Seller\']/SalesTax",
                            "110.00"});
#line 525
 testRunner.When("User has modified below  information in the  input file", ((string)(null)), table102, "When ");
#line hidden
#line 535
 testRunner.When("User Posted the file with contentType as \'application/xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 536
 testRunner.Then("Status code should be \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table103 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "Expectedvalue"});
                table103.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'0000949\'][paidBy=\'B" +
                                "orrower\']/referenceId",
                            "0000949"});
                table103.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'0000949\'][paidBy=\'B" +
                                "orrower\']/name",
                            "TIRSA Waiver of Arbitration (Loan Policy)"});
                table103.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'0000949\'][paidBy=\'B" +
                                "orrower\']/loanEstimateSection",
                            "C"});
                table103.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'0000949\'][paidBy=\'B" +
                                "orrower\']/hudLineNumber",
                            "1104"});
                table103.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'0000949\'][paidBy=\'B" +
                                "orrower\']/includedInApr",
                            "false"});
                table103.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'0000949\'][paidBy=\'B" +
                                "orrower\']/paidBy",
                            "Borrower"});
                table103.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'0000949\'][paidBy=\'B" +
                                "orrower\']/amount",
                            "30.39"});
                table103.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'0000949\'][paidBy=\'S" +
                                "eller\']/referenceId",
                            "0000949"});
                table103.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'0000949\'][paidBy=\'S" +
                                "eller\']/name",
                            "TIRSA Waiver of Arbitration (Loan Policy)"});
                table103.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'0000949\'][paidBy=\'S" +
                                "eller\']/loanEstimateSection",
                            "C"});
                table103.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'0000949\'][paidBy=\'S" +
                                "eller\']/hudLineNumber",
                            "1104"});
                table103.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'0000949\'][paidBy=\'S" +
                                "eller\']/includedInApr",
                            "false"});
                table103.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'0000949\'][paidBy=\'S" +
                                "eller\']/paidBy",
                            "Seller"});
                table103.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'0000949\'][paidBy=\'S" +
                                "eller\']/amount",
                            "150.00"});
#line 537
 testRunner.And("Verify Xml Response Values", ((string)(null)), table103, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("With Endorsements Buyer Split")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PBI55035-TransformTitle")]
        public virtual void WithEndorsementsBuyerSplit()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("With Endorsements Buyer Split", null, ((string[])(null)));
#line 554
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 555
 testRunner.Given("User has Request File\'RequestFiles\\ErnstFeeserviceResponse.xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 556
 testRunner.And("User has Endpoint \'quote/response\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table104 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "ValuetoModify"});
                table104.AddRow(new string[] {
                            "/Response/TitleResponse/Endorsements/Endorsement[Code=\'0000949\']/Splits/Split[Pai" +
                                "dBy=\'Buyer\']/Amount",
                            "100.33"});
                table104.AddRow(new string[] {
                            "/Response/TitleResponse/Endorsements/Endorsement[Code=\'0000949\']/Splits/Split[Pai" +
                                "dBy=\'Buyer\']/SalesTax",
                            "150.20"});
#line 557
 testRunner.When("User has modified below  information in the  input file", ((string)(null)), table104, "When ");
#line hidden
#line 561
 testRunner.When("User Posted the file with contentType as \'application/xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 562
 testRunner.Then("Status code should be \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table105 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "Expectedvalue"});
                table105.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'0000949\'][paidBy=\'B" +
                                "orrower\']/amount",
                            "250.53"});
#line 563
 testRunner.And("Verify Xml Response Values", ((string)(null)), table105, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Zero Endorsements Buyer Split")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PBI55035-TransformTitle")]
        public virtual void ZeroEndorsementsBuyerSplit()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Zero Endorsements Buyer Split", null, ((string[])(null)));
#line 567
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 568
 testRunner.Given("User has Request File\'RequestFiles\\ErnstFeeserviceResponse.xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 569
 testRunner.And("User has Endpoint \'quote/response\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table106 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "ValuetoModify"});
                table106.AddRow(new string[] {
                            "/Response/TitleResponse/Endorsements/Endorsement[Code=\'0000949\']/Amount",
                            "20"});
                table106.AddRow(new string[] {
                            "/Response/TitleResponse/Endorsements/Endorsement[Code=\'0000949\']/SalesTax",
                            "30"});
                table106.AddRow(new string[] {
                            "/Response/TitleResponse/Endorsements/Endorsement[Code=\'0000949\']/Splits/Split[Pai" +
                                "dBy=\'Buyer\']/Amount",
                            "0"});
                table106.AddRow(new string[] {
                            "/Response/TitleResponse/Endorsements/Endorsement[Code=\'0000949\']/Splits/Split[Pai" +
                                "dBy=\'Buyer\']/SalesTax",
                            "0"});
#line 570
 testRunner.When("User has modified below  information in the  input file", ((string)(null)), table106, "When ");
#line hidden
#line 577
 testRunner.When("User Posted the file with contentType as \'application/xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 578
 testRunner.Then("Status code should be \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table107 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "Expectedvalue"});
                table107.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'0000949\'][paidBy=\'B" +
                                "orrower\']/amount",
                            "DoesnotExists"});
#line 579
 testRunner.And("Verify Xml Response Values", ((string)(null)), table107, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Removed Endorsements Buyer Split")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PBI55035-TransformTitle")]
        public virtual void RemovedEndorsementsBuyerSplit()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Removed Endorsements Buyer Split", null, ((string[])(null)));
#line 583
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 584
 testRunner.Given("User has Request File\'RequestFiles\\MissingBuyerErnstFeeServiceResponse.xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 585
 testRunner.And("User has Endpoint \'quote/response\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table108 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "ValuetoModify"});
                table108.AddRow(new string[] {
                            "/Response/TitleResponse/Endorsements/Endorsement[Code=\'0000949\']/Amount",
                            "20"});
                table108.AddRow(new string[] {
                            "/Response/TitleResponse/Endorsements/Endorsement[Code=\'0000949\']/SalesTax",
                            "30"});
                table108.AddRow(new string[] {
                            "/Response/TitleResponse/Endorsements/Endorsement[Code=\'0000949\']/Splits/Split[Pai" +
                                "dBy=\'Seller\']/Amount",
                            "3000"});
                table108.AddRow(new string[] {
                            "/Response/TitleResponse/Endorsements/Endorsement[Code=\'0000949\']/Splits/Split[Pai" +
                                "dBy=\'Seller\']/SalesTax",
                            "4000"});
#line 586
 testRunner.When("User has modified below  information in the  input file", ((string)(null)), table108, "When ");
#line hidden
#line 593
 testRunner.When("User Posted the file with contentType as \'application/xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 594
 testRunner.Then("Status code should be \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table109 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "Expectedvalue"});
                table109.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'0000949\'][paidBy=\'B" +
                                "orrower\']/amount",
                            "DoesnotExists"});
                table109.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'0000949\'][paidBy=\'S" +
                                "eller\']/amount",
                            "7000"});
#line 595
 testRunner.And("Verify Xml Response Values", ((string)(null)), table109, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("With Endorsements Seller Split")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PBI55035-TransformTitle")]
        public virtual void WithEndorsementsSellerSplit()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("With Endorsements Seller Split", null, ((string[])(null)));
#line 600
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 601
 testRunner.Given("User has Request File\'RequestFiles\\ErnstFeeserviceResponse.xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 602
 testRunner.And("User has Endpoint \'quote/response\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table110 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "ValuetoModify"});
                table110.AddRow(new string[] {
                            "/Response/TitleResponse/Endorsements/Endorsement[Code=\'0000949\']/Splits/Split[Pai" +
                                "dBy=\'Seller\']/Amount",
                            "100"});
                table110.AddRow(new string[] {
                            "/Response/TitleResponse/Endorsements/Endorsement[Code=\'0000949\']/Splits/Split[Pai" +
                                "dBy=\'Seller\']/SalesTax",
                            "150"});
#line 603
 testRunner.When("User has modified below  information in the  input file", ((string)(null)), table110, "When ");
#line hidden
#line 608
 testRunner.When("User Posted the file with contentType as \'application/xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 609
 testRunner.Then("Status code should be \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table111 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "Expectedvalue"});
                table111.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'0000949\'][paidBy=\'S" +
                                "eller\']/amount",
                            "250"});
#line 610
 testRunner.And("Verify Xml Response Values", ((string)(null)), table111, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Removed Endorsements Seller Split")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PBI55035-TransformTitle")]
        public virtual void RemovedEndorsementsSellerSplit()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Removed Endorsements Seller Split", null, ((string[])(null)));
#line 614
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 615
 testRunner.Given("User has Request File\'RequestFiles\\MissingSellerErnstFeeServiceResponse.xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 616
 testRunner.And("User has Endpoint \'quote/response\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table112 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "ValuetoModify"});
                table112.AddRow(new string[] {
                            "/Response/TitleResponse/Endorsements/Endorsement[Code=\'0000949\']/Amount",
                            "250"});
                table112.AddRow(new string[] {
                            "/Response/TitleResponse/Endorsements/Endorsement[Code=\'0000949\']/SalesTax",
                            "300"});
                table112.AddRow(new string[] {
                            "/Response/TitleResponse/Endorsements/Endorsement[Code=\'0000949\']/Splits/Split[Pai" +
                                "dBy=\'Buyer\']/Amount",
                            "120"});
                table112.AddRow(new string[] {
                            "/Response/TitleResponse/Endorsements/Endorsement[Code=\'0000949\']/Splits/Split[Pai" +
                                "dBy=\'Buyer\']/SalesTax",
                            "240"});
#line 617
 testRunner.When("User has modified below  information in the  input file", ((string)(null)), table112, "When ");
#line hidden
#line 624
 testRunner.When("User Posted the file with contentType as \'application/xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 625
 testRunner.Then("Status code should be \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table113 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "Expectedvalue"});
                table113.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'0000949\'][paidBy=\'S" +
                                "eller\']/amount",
                            "DoesnotExists"});
                table113.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'0000949\'][paidBy=\'B" +
                                "orrower\']/amount",
                            "360"});
#line 626
 testRunner.And("Verify Xml Response Values", ((string)(null)), table113, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Zero Endorsements Seller Split")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PBI55035-TransformTitle")]
        public virtual void ZeroEndorsementsSellerSplit()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Zero Endorsements Seller Split", null, ((string[])(null)));
#line 631
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 632
 testRunner.Given("User has Request File\'RequestFiles\\ErnstFeeserviceResponse.xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 633
 testRunner.And("User has Endpoint \'quote/response\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table114 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "ValuetoModify"});
                table114.AddRow(new string[] {
                            "/Response/TitleResponse/Endorsements/Endorsement[Code=\'0000949\']/Amount",
                            "250"});
                table114.AddRow(new string[] {
                            "/Response/TitleResponse/Endorsements/Endorsement[Code=\'0000949\']/SalesTax",
                            "300"});
                table114.AddRow(new string[] {
                            "/Response/TitleResponse/Endorsements/Endorsement[Code=\'0000949\']/Splits/Split[Pai" +
                                "dBy=\'Seller\']/Amount",
                            "0"});
                table114.AddRow(new string[] {
                            "/Response/TitleResponse/Endorsements/Endorsement[Code=\'0000949\']/Splits/Split[Pai" +
                                "dBy=\'Seller\']/SalesTax",
                            "0"});
#line 634
 testRunner.When("User has modified below  information in the  input file", ((string)(null)), table114, "When ");
#line hidden
#line 641
 testRunner.When("User Posted the file with contentType as \'application/xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 642
 testRunner.Then("Status code should be \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table115 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "Expectedvalue"});
                table115.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'0000949\'][paidBy=\'S" +
                                "eller\']/amount",
                            "DoesnotExists"});
#line 643
 testRunner.And("Verify Xml Response Values", ((string)(null)), table115, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Removed Endorsements Buyer and Seller Split")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PBI55035-TransformTitle")]
        public virtual void RemovedEndorsementsBuyerAndSellerSplit()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Removed Endorsements Buyer and Seller Split", null, ((string[])(null)));
#line 647
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 648
 testRunner.Given("User has Request File\'RequestFiles\\MissingBuyerSellerErnstFeeServiceResponse.xml\'" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 649
 testRunner.And("User has Endpoint \'quote/response\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table116 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "ValuetoModify"});
                table116.AddRow(new string[] {
                            "/Response/TitleResponse/Endorsements/Endorsement[Code=\'0000949\']/Amount",
                            "250"});
                table116.AddRow(new string[] {
                            "/Response/TitleResponse/Endorsements/Endorsement[Code=\'0000949\']/SalesTax",
                            "300"});
#line 650
 testRunner.When("User has modified below  information in the  input file", ((string)(null)), table116, "When ");
#line hidden
#line 654
 testRunner.When("User Posted the file with contentType as \'application/xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 655
 testRunner.Then("Status code should be \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table117 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "Expectedvalue"});
                table117.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'0000949\'][paidBy=\'B" +
                                "orrower\']/amount",
                            "550"});
#line 656
 testRunner.And("Verify Xml Response Values", ((string)(null)), table117, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Zero Endorsements Buyer and Seller Split with premium is zero")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PBI55035-TransformTitle")]
        public virtual void ZeroEndorsementsBuyerAndSellerSplitWithPremiumIsZero()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Zero Endorsements Buyer and Seller Split with premium is zero", null, ((string[])(null)));
#line 660
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 661
 testRunner.Given("User has Request File\'RequestFiles\\ErnstFeeserviceResponse.xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 662
 testRunner.And("User has Endpoint \'quote/response\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table118 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "ValuetoModify"});
                table118.AddRow(new string[] {
                            "/Response/TitleResponse/Endorsements/Endorsement[Code=\'0000949\']/Amount",
                            "0.00"});
                table118.AddRow(new string[] {
                            "/Response/TitleResponse/Endorsements/Endorsement[Code=\'0000949\']/SalesTax",
                            "0.00"});
                table118.AddRow(new string[] {
                            "/Response/TitleResponse/Endorsements/Endorsement[Code=\'0000949\']/Splits/Split[Pai" +
                                "dBy=\'Seller\']/Amount",
                            "0"});
                table118.AddRow(new string[] {
                            "/Response/TitleResponse/Endorsements/Endorsement[Code=\'0000949\']/Splits/Split[Pai" +
                                "dBy=\'Seller\']/SalesTax",
                            "0"});
                table118.AddRow(new string[] {
                            "/Response/TitleResponse/Endorsements/Endorsement[Code=\'0000949\']/Splits/Split[Pai" +
                                "dBy=\'Buyer\']/Amount",
                            "0"});
                table118.AddRow(new string[] {
                            "/Response/TitleResponse/Endorsements/Endorsement[Code=\'0000949\']/Splits/Split[Pai" +
                                "dBy=\'Buyer\']/SalesTax",
                            "0"});
#line 663
 testRunner.When("User has modified below  information in the  input file", ((string)(null)), table118, "When ");
#line hidden
#line 671
 testRunner.When("User Posted the file with contentType as \'application/xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 672
 testRunner.Then("Status code should be \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table119 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "Expectedvalue"});
                table119.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'0000949\'][paidBy=\'B" +
                                "orrower\']/amount",
                            "0.00"});
#line 673
 testRunner.And("Verify Xml Response Values", ((string)(null)), table119, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Removed Endorsements Buyer and Seller Split with premium amount zero")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PBI55035-TransformTitle")]
        public virtual void RemovedEndorsementsBuyerAndSellerSplitWithPremiumAmountZero()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Removed Endorsements Buyer and Seller Split with premium amount zero", null, ((string[])(null)));
#line 677
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 678
 testRunner.Given("User has Request File\'RequestFiles\\MissingBuyerSellerErnstFeeServiceResponse.xml\'" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 679
 testRunner.And("User has Endpoint \'quote/response\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table120 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "ValuetoModify"});
                table120.AddRow(new string[] {
                            "/Response/TitleResponse/Endorsements/Endorsement[Code=\'0000949\']/Amount",
                            "0"});
                table120.AddRow(new string[] {
                            "/Response/TitleResponse/Endorsements/Endorsement[Code=\'0000949\']/SalesTax",
                            "0"});
#line 680
 testRunner.When("User has modified below  information in the  input file", ((string)(null)), table120, "When ");
#line hidden
#line 684
 testRunner.When("User Posted the file with contentType as \'application/xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 685
 testRunner.Then("Status code should be \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table121 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "Expectedvalue"});
                table121.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductResponse/body/Fees/Fee[referenceId=\'0000949\'][paidBy=\'B" +
                                "orrower\']/amount",
                            "0"});
#line 686
 testRunner.And("Verify Xml Response Values", ((string)(null)), table121, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
