// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.1.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Ernst.API.Blend.IntegratedTest.Feature
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class PBI55030TransformRequestFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "PBI55030-TransformRequest.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "PBI55030TransformRequest", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "PBI55030TransformRequest")))
            {
                global::Ernst.API.Blend.IntegratedTest.Feature.PBI55030TransformRequestFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Status OK")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PBI55030TransformRequest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("200-Status-OK")]
        public virtual void StatusOK()
        {
            string[] tagsOfScenario = new string[] {
                    "200-Status-OK"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Status OK", null, new string[] {
                        "200-Status-OK"});
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
 testRunner.Given("User has Request File\'RequestFiles\\GetFeesForHomeLoanProductRequest.xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 6
 testRunner.And("User has Endpoint \'quote/request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 7
 testRunner.When("User Posted the file with contentType as \'application/xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 8
 testRunner.Then("Status code should be \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Invalid Endpoint")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PBI55030TransformRequest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("404-Notfound")]
        public virtual void InvalidEndpoint()
        {
            string[] tagsOfScenario = new string[] {
                    "404-Notfound"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Invalid Endpoint", null, new string[] {
                        "404-Notfound"});
#line 11
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 12
 testRunner.Given("User has Request File\'RequestFiles\\GetFeesForHomeLoanProductRequest.xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 13
 testRunner.And("User has Endpoint \'quote/resnse\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 14
 testRunner.When("User Posted the file with contentType as \'application/xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 15
 testRunner.Then("Status code should be \'NotFound\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Invalid Bearer Toekn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PBI55030TransformRequest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("401-NotAuthorized")]
        public virtual void InvalidBearerToekn()
        {
            string[] tagsOfScenario = new string[] {
                    "401-NotAuthorized"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Invalid Bearer Toekn", null, new string[] {
                        "401-NotAuthorized"});
#line 18
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 19
 testRunner.Given("User has Request File\'RequestFiles\\GetFeesForHomeLoanProductRequest.xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 20
 testRunner.And("User has Endpoint \'quote/request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 21
 testRunner.When("User Posted the file without authorization and contentType as \'application/xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 22
 testRunner.Then("Status code should be \'Unauthorized\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Invalid Content")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PBI55030TransformRequest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("400-BadRequest")]
        public virtual void InvalidContent()
        {
            string[] tagsOfScenario = new string[] {
                    "400-BadRequest"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Invalid Content", null, new string[] {
                        "400-BadRequest"});
#line 25
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 26
 testRunner.Given("User has Request File\'RequestFiles\\InvalidGetFeesForHomeLoanProductRequest.xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 27
 testRunner.And("User has Endpoint \'quote/request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 28
 testRunner.When("User Posted the file with contentType as \'application/xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 29
 testRunner.Then("Status code should be \'BadRequest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("With lienType not equal to \"HELOC\" and propertyType = SingleFamily and Purpose ot" +
            "her than \"Refinance\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PBI55030TransformRequest")]
        public virtual void WithLienTypeNotEqualToHELOCAndPropertyTypeSingleFamilyAndPurposeOtherThanRefinance()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("With lienType not equal to \"HELOC\" and propertyType = SingleFamily and Purpose ot" +
                    "her than \"Refinance\"", null, ((string[])(null)));
#line 31
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 32
 testRunner.Given("User has Request File\'RequestFiles\\GetFeesForHomeLoanProductRequest.xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 33
 testRunner.And("User has Endpoint \'quote/request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "ValuetoModify"});
                table1.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductRequest/requestId",
                            "502eebbb-b930-4634-bb69-e0e583cc9748"});
                table1.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductRequest/homeLoanApplication/borrowers/borrower/firstTim" +
                                "eHomeBuyer",
                            "True"});
                table1.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductRequest/homeLoanApplication/homeLoan/lienType",
                            "First"});
                table1.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductRequest/homeLoanApplication/homeLoan/purpose",
                            "Purchase"});
                table1.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductRequest/homeLoanApplication/homeLoan/product/amortizati" +
                                "onType",
                            "Fixed"});
                table1.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductRequest/homeLoanApplication/homeLoan/sameLenderRefinanc" +
                                "e",
                            "False"});
                table1.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductRequest/homeLoanApplication/property/numberOfUnits",
                            "1"});
                table1.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductRequest/homeLoanApplication/property/propertyType",
                            "SingleFamily"});
                table1.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductRequest/homeLoanApplication/property/propertyUsageType",
                            "PrimaryResidence"});
#line 34
 testRunner.When("User has modified below  information in the  input file", ((string)(null)), table1, "When ");
#line hidden
#line 45
 testRunner.When("User Posted the file with contentType as \'application/xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 46
 testRunner.Then("Status code should be \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "Expectedvalue"});
                table2.AddRow(new string[] {
                            "/Request/Version",
                            "3"});
                table2.AddRow(new string[] {
                            "/Request/Authentication/UserID",
                            "SalesDemo"});
                table2.AddRow(new string[] {
                            "/Request/Authentication/Password",
                            "Demo123"});
                table2.AddRow(new string[] {
                            "/Request/TransactionDate",
                            "CurrentDate"});
                table2.AddRow(new string[] {
                            "/Request/ClientTransactionID",
                            "502eebbb-b930-4634-bb69-e0e583cc9748"});
                table2.AddRow(new string[] {
                            "/Request/RequestInfo/Loan/FirstTimeHomeBuyer",
                            "true"});
                table2.AddRow(new string[] {
                            "/Request/RequestInfo/Loan/ApplicationDate",
                            "CurrentDate"});
                table2.AddRow(new string[] {
                            "/Request/RequestInfo/Loan/HELOC",
                            "false"});
                table2.AddRow(new string[] {
                            "/Request/RequestInfo/Loan/LoanPurpose",
                            "Purchase"});
                table2.AddRow(new string[] {
                            "/Request/RequestInfo/Loan/RefinanceSameLender",
                            "false"});
                table2.AddRow(new string[] {
                            "/Request/RequestInfo/Property/NumberOfUnits",
                            "1"});
                table2.AddRow(new string[] {
                            "/Request/RequestInfo/Property/ProjectLegalStructure",
                            "Unknown"});
                table2.AddRow(new string[] {
                            "/Request/RequestInfo/Property/PropertyUse",
                            "PrimaryResidence"});
#line 47
 testRunner.And("Verify Xml Response Values", ((string)(null)), table2, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("With lienType equal to \"HELOC\" and propertyType = SingleFamily and Purpose other " +
            "than \"Refinance\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PBI55030TransformRequest")]
        public virtual void WithLienTypeEqualToHELOCAndPropertyTypeSingleFamilyAndPurposeOtherThanRefinance()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("With lienType equal to \"HELOC\" and propertyType = SingleFamily and Purpose other " +
                    "than \"Refinance\"", null, ((string[])(null)));
#line 63
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 64
 testRunner.Given("User has Request File\'RequestFiles\\GetFeesForHomeLoanProductRequest.xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 65
 testRunner.And("User has Endpoint \'quote/request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "ValuetoModify"});
                table3.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductRequest/requestId",
                            "502eebbb-b930-4634-bb69-e0e583cc9748"});
                table3.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductRequest/homeLoanApplication/borrowers/borrower/firstTim" +
                                "eHomeBuyer",
                            "true"});
                table3.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductRequest/homeLoanApplication/homeLoan/lienType",
                            "HELOC"});
                table3.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductRequest/homeLoanApplication/homeLoan/purpose",
                            "Purchase"});
                table3.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductRequest/homeLoanApplication/homeLoan/product/amortizati" +
                                "onType",
                            "Fixed"});
                table3.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductRequest/homeLoanApplication/homeLoan/sameLenderRefinanc" +
                                "e",
                            "false"});
                table3.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductRequest/homeLoanApplication/property/numberOfUnits",
                            "1"});
                table3.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductRequest/homeLoanApplication/property/propertyType",
                            "SingleFamily"});
                table3.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductRequest/homeLoanApplication/property/propertyUsageType",
                            "PrimaryResidence"});
#line 66
 testRunner.When("User has modified below  information in the  input file", ((string)(null)), table3, "When ");
#line hidden
#line 77
 testRunner.When("User Posted the file with contentType as \'application/xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 78
 testRunner.Then("Status code should be \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "Expectedvalue"});
                table4.AddRow(new string[] {
                            "/Request/Version",
                            "3"});
                table4.AddRow(new string[] {
                            "/Request/Authentication/UserID",
                            "SalesDemo"});
                table4.AddRow(new string[] {
                            "/Request/Authentication/Password",
                            "Demo123"});
                table4.AddRow(new string[] {
                            "/Request/TransactionDate",
                            "CurrentDate"});
                table4.AddRow(new string[] {
                            "/Request/ClientTransactionID",
                            "502eebbb-b930-4634-bb69-e0e583cc9748"});
                table4.AddRow(new string[] {
                            "/Request/RequestInfo/Loan/FirstTimeHomeBuyer",
                            "true"});
                table4.AddRow(new string[] {
                            "/Request/RequestInfo/Loan/ApplicationDate",
                            "CurrentDate"});
                table4.AddRow(new string[] {
                            "/Request/RequestInfo/Loan/HELOC",
                            "true"});
                table4.AddRow(new string[] {
                            "/Request/RequestInfo/Loan/LoanPurpose",
                            "Purchase"});
                table4.AddRow(new string[] {
                            "/Request/RequestInfo/Loan/RefinanceSameLender",
                            "false"});
                table4.AddRow(new string[] {
                            "/Request/RequestInfo/Property/NumberOfUnits",
                            "1"});
                table4.AddRow(new string[] {
                            "/Request/RequestInfo/Property/ProjectLegalStructure",
                            "Unknown"});
                table4.AddRow(new string[] {
                            "/Request/RequestInfo/Property/PropertyUse",
                            "PrimaryResidence"});
#line 79
 testRunner.And("Verify Xml Response Values", ((string)(null)), table4, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("With lienType equal to \"HELOC\" and propertyType = \"Condominium\" and Purpose other" +
            " than \"Refinance\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PBI55030TransformRequest")]
        public virtual void WithLienTypeEqualToHELOCAndPropertyTypeCondominiumAndPurposeOtherThanRefinance()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("With lienType equal to \"HELOC\" and propertyType = \"Condominium\" and Purpose other" +
                    " than \"Refinance\"", null, ((string[])(null)));
#line 95
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 96
 testRunner.Given("User has Request File\'RequestFiles\\GetFeesForHomeLoanProductRequest.xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 97
 testRunner.And("User has Endpoint \'quote/request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "ValuetoModify"});
                table5.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductRequest/requestId",
                            "502eebbb-b930-4634-bb69-e0e583cc9748"});
                table5.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductRequest/homeLoanApplication/borrowers/borrower/firstTim" +
                                "eHomeBuyer",
                            "true"});
                table5.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductRequest/homeLoanApplication/homeLoan/lienType",
                            "HELOC"});
                table5.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductRequest/homeLoanApplication/homeLoan/purpose",
                            "Purchase"});
                table5.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductRequest/homeLoanApplication/homeLoan/product/amortizati" +
                                "onType",
                            "Fixed"});
                table5.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductRequest/homeLoanApplication/homeLoan/sameLenderRefinanc" +
                                "e",
                            "false"});
                table5.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductRequest/homeLoanApplication/property/numberOfUnits",
                            "1"});
                table5.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductRequest/homeLoanApplication/property/propertyType",
                            "Condominium"});
                table5.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductRequest/homeLoanApplication/property/propertyUsageType",
                            "PrimaryResidence"});
#line 98
 testRunner.When("User has modified below  information in the  input file", ((string)(null)), table5, "When ");
#line hidden
#line 109
 testRunner.When("User Posted the file with contentType as \'application/xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 110
 testRunner.Then("Status code should be \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "Expectedvalue"});
                table6.AddRow(new string[] {
                            "/Request/Version",
                            "3"});
                table6.AddRow(new string[] {
                            "/Request/Authentication/UserID",
                            "SalesDemo"});
                table6.AddRow(new string[] {
                            "/Request/Authentication/Password",
                            "Demo123"});
                table6.AddRow(new string[] {
                            "/Request/TransactionDate",
                            "CurrentDate"});
                table6.AddRow(new string[] {
                            "/Request/ClientTransactionID",
                            "502eebbb-b930-4634-bb69-e0e583cc9748"});
                table6.AddRow(new string[] {
                            "/Request/RequestInfo/Loan/FirstTimeHomeBuyer",
                            "true"});
                table6.AddRow(new string[] {
                            "/Request/RequestInfo/Loan/ApplicationDate",
                            "CurrentDate"});
                table6.AddRow(new string[] {
                            "/Request/RequestInfo/Loan/HELOC",
                            "true"});
                table6.AddRow(new string[] {
                            "/Request/RequestInfo/Loan/LoanPurpose",
                            "Purchase"});
                table6.AddRow(new string[] {
                            "/Request/RequestInfo/Loan/RefinanceSameLender",
                            "false"});
                table6.AddRow(new string[] {
                            "/Request/RequestInfo/Property/NumberOfUnits",
                            "1"});
                table6.AddRow(new string[] {
                            "/Request/RequestInfo/Property/ProjectLegalStructure",
                            "Condominium"});
                table6.AddRow(new string[] {
                            "/Request/RequestInfo/Property/PropertyUse",
                            "PrimaryResidence"});
#line 111
 testRunner.And("Verify Xml Response Values", ((string)(null)), table6, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("With lienType equal to \"HELOC\" and propertyType = \"Cooperative\" and Purpose other" +
            " than \"Refinance\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PBI55030TransformRequest")]
        public virtual void WithLienTypeEqualToHELOCAndPropertyTypeCooperativeAndPurposeOtherThanRefinance()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("With lienType equal to \"HELOC\" and propertyType = \"Cooperative\" and Purpose other" +
                    " than \"Refinance\"", null, ((string[])(null)));
#line 127
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 128
 testRunner.Given("User has Request File\'RequestFiles\\GetFeesForHomeLoanProductRequest.xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 129
 testRunner.And("User has Endpoint \'quote/request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "ValuetoModify"});
                table7.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductRequest/requestId",
                            "502eebbb-b930-4634-bb69-e0e583cc9748"});
                table7.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductRequest/homeLoanApplication/borrowers/borrower/firstTim" +
                                "eHomeBuyer",
                            "True"});
                table7.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductRequest/homeLoanApplication/homeLoan/lienType",
                            "HELOC"});
                table7.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductRequest/homeLoanApplication/homeLoan/purpose",
                            "Purchase"});
                table7.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductRequest/homeLoanApplication/homeLoan/product/amortizati" +
                                "onType",
                            "Fixed"});
                table7.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductRequest/homeLoanApplication/homeLoan/sameLenderRefinanc" +
                                "e",
                            "False"});
                table7.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductRequest/homeLoanApplication/property/numberOfUnits",
                            "1"});
                table7.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductRequest/homeLoanApplication/property/propertyType",
                            "cooperative"});
                table7.AddRow(new string[] {
                            "/GetFeesForHomeLoanProductRequest/homeLoanApplication/property/propertyUsageType",
                            "PrimaryResidence"});
#line 130
 testRunner.When("User has modified below  information in the  input file", ((string)(null)), table7, "When ");
#line hidden
#line 141
 testRunner.When("User Posted the file with contentType as \'application/xml\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 142
 testRunner.Then("Status code should be \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "XPath",
                            "Expectedvalue"});
                table8.AddRow(new string[] {
                            "/Request/Version",
                            "3"});
                table8.AddRow(new string[] {
                            "/Request/Authentication/UserID",
                            "SalesDemo"});
                table8.AddRow(new string[] {
                            "/Request/Authentication/Password",
                            "Demo123"});
                table8.AddRow(new string[] {
                            "/Request/TransactionDate",
                            "CurrentDate"});
                table8.AddRow(new string[] {
                            "/Request/ClientTransactionID",
                            "502eebbb-b930-4634-bb69-e0e583cc9748"});
                table8.AddRow(new string[] {
                            "/Request/RequestInfo/Loan/FirstTimeHomeBuyer",
                            "true"});
                table8.AddRow(new string[] {
                            "/Request/RequestInfo/Loan/ApplicationDate",
                            "CurrentDate"});
                table8.AddRow(new string[] {
                            "/Request/RequestInfo/Loan/HELOC",
                            "true"});
                table8.AddRow(new string[] {
                            "/Request/RequestInfo/Loan/LoanPurpose",
                            "Purchase"});
                table8.AddRow(new string[] {
                            "/Request/RequestInfo/Loan/RefinanceSameLender",
                            "false"});
                table8.AddRow(new string[] {
                            "/Request/RequestInfo/Property/NumberOfUnits",
                            "1"});
                table8.AddRow(new string[] {
                            "/Request/RequestInfo/Property/ProjectLegalStructure",
                            "Cooperative"});
                table8.AddRow(new string[] {
                            "/Request/RequestInfo/Property/PropertyUse",
                            "PrimaryResidence"});
#line 143
 testRunner.And("Verify Xml Response Values", ((string)(null)), table8, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
